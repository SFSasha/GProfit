import os
import logging
import asyncio
import sqlite3
import hmac
import hashlib
import json # <-- –§–ò–ö–°: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç
import random # <-- –§–ò–ö–°: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç
from time import time
from typing import Optional, Dict, List
from urllib.parse import parse_qs, unquote

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates 
from pydantic import BaseModel
import uvicorn

# Telegram imports are usually not needed if you only run FastAPI
# from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO 
)
logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")

DB_PATH = "/data/app.db"
BOT_USERNAME = os.environ.get("BOT_USERNAME", "star_miner_bot") 
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
ADMIN_TG_ID = os.environ.get("ADMIN_TG_ID") 

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not WEBAPP_URL:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω WEBAPP_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
# if not ADMIN_TG_ID: # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∫–∞–∫ –±—ã–ª–æ
#     logger.warning("ADMIN_TG_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")


# === –ú–û–î–ï–õ–ò Pydantic ===

class RequestData(BaseModel):
    init_data: str 

class WithdrawRequest(BaseModel):
    init_data: str
    amount: float

class BlastResponse(BaseModel):
    prize_amount: float
    new_stars: float
    new_dynamite: int
    referrer_bonus: float = 0.0 # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

class AdminAction(BaseModel):
    init_data: str
    withdrawal_id: int
    action: str 

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î –∏ –£–¢–ò–õ–ò–¢–´ ===

def get_db_connection():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def initialize_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            stars REAL DEFAULT 0.0,
            dynamite INTEGER DEFAULT 3,
            last_blast INTEGER DEFAULT 0,
            referrer_id INTEGER,
            referral_earnings REAL DEFAULT 0.0, -- –ù–û–í–û–ï –ü–û–õ–ï: –î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS withdrawals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            amount REAL,
            status TEXT DEFAULT 'pending', -- pending, approved, rejected
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    conn.commit()
    conn.close()

# –í—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize_db()

# --- –õ–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram Web App ---
def init_data_auth(init_data: str) -> Dict[str, any]:
    if not init_data:
        raise HTTPException(status_code=401, detail="Auth failed: No init_data provided.")

    try:
        key = hmac.new(
            key=TELEGRAM_TOKEN.strip().encode(),
            msg=b"WebAppData",
            digestmod=hashlib.sha256
        ).digest()
    except Exception as e:
        logger.error(f"Error creating HMAC key: {e}")
        raise HTTPException(status_code=500, detail="Internal Auth Error.")


    query_params = parse_qs(unquote(init_data)) 
    received_hash_list = query_params.pop('hash', [None])
    received_hash = received_hash_list[0]

    if not received_hash or not query_params.get('auth_date'):
        raise HTTPException(status_code=401, detail="Auth failed: Missing hash or auth_date.")

    data_check_string = "\n".join([
        f"{key}={value[0]}"
        for key, value in sorted(query_params.items())
    ])

    calculated_hash = hmac.new(
        key=key,
        msg=data_check_string.encode(),
        digestmod=hashlib.sha256
    ).hexdigest()
    
    logger.info("--- AUTH DEBUG START ---")
    logger.info(f"DATA CHECK STRING: '{data_check_string[:100]}...'")
    logger.info(f"CALCULATED HASH: {calculated_hash}")
    logger.info(f"RECEIVED HASH: {received_hash}")
    logger.info("--- AUTH DEBUG END ---")

    if calculated_hash != received_hash:
        logger.error(f"Auth failed: Hash mismatch! Calculated: {calculated_hash}, Received: {received_hash}")
        raise HTTPException(status_code=401, detail="Auth failed: Hash mismatch.")

    user_data = query_params.get('user', query_params.get('receiver', [None]))[0]
    if not user_data:
        raise HTTPException(status_code=401, detail="Auth failed: User data not found.")
        
    auth_data = json.loads(user_data) # 'json' —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    
    return auth_data


# --- –õ–û–ì–ò–ö–ê –ë–î (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨) ---

# –ö–û–ù–°–¢–ê–ù–¢–ê: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
INITIAL_STAR_BONUS = 2.0 

def get_or_create_user(user_id: int, username: str, start_parameter: Optional[str] = None):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # 1. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = cursor.fetchone()
    
    if not user:
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referrer_id = None
        if start_parameter and start_parameter.isdigit() and int(start_parameter) != user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
            potential_referrer_id = int(start_parameter)
            cursor.execute("SELECT id FROM users WHERE id = ?", (potential_referrer_id,))
            if cursor.fetchone():
                referrer_id = potential_referrer_id
                
        # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–Ω—É—Å–æ–º
        cursor.execute("""
            INSERT INTO users (id, username, stars, dynamite, referrer_id, referral_earnings)
            VALUES (?, ?, ?, ?, ?, 0.0)
        """, (user_id, username, INITIAL_STAR_BONUS, 3, referrer_id)) # –ù–û–í–û–ï: 2.0 –∑–≤–µ–∑–¥—ã
        conn.commit()
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        user = cursor.fetchone()
        logger.info(f"New user created: {username} ({user_id}). Referrer: {referrer_id}, Bonus: {INITIAL_STAR_BONUS} ‚òÖ")
        
    conn.close()
    return dict(user)


# --- API FastAPI ---
app = FastAPI()
templates = Jinja2Templates(directory=".") 

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    start_param = request.query_params.get("tgWebAppStartParam")
    
    return templates.TemplateResponse("index.html", {"request": request, "start_param": start_param})


@app.post("/api/v1/data")
async def get_user_data(data: RequestData):
    init_data = data.init_data 
    
    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for data endpoint: {e.detail}")
        raise e
        
    user_id = auth_data['id']
    username = auth_data.get('username') or f"id_{user_id}"
    
    user_data = get_or_create_user(user_id, username)
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
    referrals_count = cursor.fetchone()[0]
    conn.close()
    
    # user_data —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç referral_earnings
    return JSONResponse(content={
        "user_data": user_data,
        "referrals_count": referrals_count,
        "bot_username": BOT_USERNAME,
        "is_admin": str(user_id) == ADMIN_TG_ID
    })


@app.post("/api/v1/blast", response_model=BlastResponse)
async def blast_mine(data: RequestData):
    init_data = data.init_data
    
    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for blast endpoint: {e.detail}")
        raise e

    user_id = auth_data['id']
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏—Ç–∞ –∏ –∫—É–ª–¥–∞—É–Ω–∞
    cursor.execute("SELECT stars, dynamite, last_blast, referrer_id FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
    current_stars, current_dynamite, last_blast, referrer_id = result
    
    MIN_BLAST_INTERVAL = 30 # —Å–µ–∫—É–Ω–¥
    current_time = int(time())
    
    if current_dynamite <= 0:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ—Ç –¥–∏–Ω–∞–º–∏—Ç–∞ (0 üí£). –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞.")
        
    if current_time - last_blast < MIN_BLAST_INTERVAL:
        remaining = MIN_BLAST_INTERVAL - (current_time - last_blast)
        conn.close()
        raise HTTPException(status_code=429, detail=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∑—Ä—ã–≤–∞.")

    # 2. –†–∞—Å—á–µ—Ç –¥–æ–±—ã—á–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    
    # –ù–û–í–û–ï: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã –∏ –≤—ã–±–æ—Ä
    PRIZE_AMOUNTS = [0.1, 0.3, 0.5, 1.0, 3.0, 5.0]
    # import random —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ
    prize_amount = random.choice(PRIZE_AMOUNTS)
    
    new_stars = current_stars + prize_amount
    new_dynamite = current_dynamite - 1
    
    referrer_bonus = 0.0
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        UPDATE users 
        SET stars = ?, 
            dynamite = ?, 
            last_blast = ? 
        WHERE id = ?
    """, (new_stars, new_dynamite, current_time, user_id))
    
    # 3. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (10%)
    if referrer_id is not None:
        REFERRAL_PERCENT = 0.10 # 10%
        referrer_bonus = round(prize_amount * REFERRAL_PERCENT, 2)
        
        cursor.execute("""
            UPDATE users 
            SET stars = stars + ?, 
                referral_earnings = referral_earnings + ? 
            WHERE id = ?
        """, (referrer_bonus, referrer_bonus, referrer_id))
        logger.info(f"Referral bonus: User {referrer_id} received {referrer_bonus} ‚òÖ from user {user_id}'s blast.")

    conn.commit()
    conn.close()
    
    return JSONResponse(content={
        "prize_amount": prize_amount,
        "new_stars": new_stars,
        "new_dynamite": new_dynamite,
        "referrer_bonus": referrer_bonus
    })


@app.post("/api/v1/withdraw")
async def request_withdraw(data: WithdrawRequest):
    init_data = data.init_data
    
    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for withdraw endpoint: {e.detail}")
        raise e
        
    user_id = auth_data['id']
    username = auth_data.get('username') or f"id_{user_id}"
    amount = data.amount
    
    MIN_WITHDRAW = 50.0 # –ù–û–í–û–ï: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ 50.0
    if amount < MIN_WITHDRAW:
        raise HTTPException(status_code=400, detail=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW} ‚òÖ.")

    conn = get_db_connection()
    cursor = conn.cursor()
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    cursor.execute("SELECT stars FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
    current_stars = result[0]
    
    if amount > current_stars:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

    # 2. –°–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    new_stars = current_stars - amount
    
    cursor.execute("UPDATE users SET stars = ? WHERE id = ?", (new_stars, user_id))
    
    cursor.execute("""
        INSERT INTO withdrawals (user_id, username, amount)
        VALUES (?, ?, ?)
    """, (user_id, username, amount))
    
    conn.commit()
    conn.close()
    
    logger.info(f"Withdrawal requested: User {username} ({user_id}) requested {amount} ‚òÖ")
    
    return JSONResponse(content={
        "status": "ok",
        "message": f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} ‚òÖ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "new_stars": new_stars # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    })


# --- –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ---

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    if not ADMIN_TG_ID:
        return False
    return str(user_id) == ADMIN_TG_ID


@app.get("/admin/withdrawals", response_class=HTMLResponse)
async def admin_panel(request: Request):
    """–û—Ç–¥–∞—á–∞ –ø—É—Å—Ç–æ–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é TWA."""
    # –ü–æ—Å–∫–æ–ª—å–∫—É –≤—Å—è –ª–æ–≥–∏–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ index.html, 
    # —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–π–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ –±—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±—ã–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π.
    # –ù–æ –¥–ª—è TWA –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –û—Å—Ç–∞–≤–ª—è—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    return templates.TemplateResponse("admin.html", {"request": request, "admin_tg_id": ADMIN_TG_ID})


@app.post("/api/v1/admin/withdrawals")
async def get_all_withdrawals(data: RequestData):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫."""
    init_data = data.init_data
    
    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for admin endpoint: {e.detail}")
        raise e
        
    if not is_admin(auth_data['id']):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
    conn = get_db_connection()
    cursor = conn.cursor()
    # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ –≤—ã–±–æ—Ä–∫—É, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ, –∫—Ç–æ –≤—ã–≤–æ–¥–∏—Ç
    cursor.execute("SELECT id, user_id, username, amount, status, created_at FROM withdrawals ORDER BY created_at DESC")
    withdrawals = [dict(row) for row in cursor.fetchall()]
    conn.close()
    
    return JSONResponse(content={"withdrawals": withdrawals})


@app.post("/api/v1/admin/action")
async def process_admin_action(data: AdminAction):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ (approve/reject)."""
    init_data = data.init_data
    withdrawal_id = data.withdrawal_id
    action = data.action
    
    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for admin action: {e.detail}")
        raise e

    if not is_admin(auth_data['id']):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT user_id, amount, status FROM withdrawals WHERE id = ?", (withdrawal_id,))
    withdrawal = cursor.fetchone()
    
    if not withdrawal:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    user_id, amount, current_status = withdrawal
    
    if current_status != 'pending':
        conn.close()
        raise HTTPException(status_code=400, detail=f"–ó–∞—è–≤–∫–∞ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {current_status}")

    if action == 'approve':
        new_status = 'approved'
        cursor.execute("UPDATE withdrawals SET status = ? WHERE id = ?", (new_status, withdrawal_id))
        conn.commit()
        
    elif action == 'reject':
        new_status = 'rejected'
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET stars = stars + ? WHERE id = ?", (amount, user_id))
        cursor.execute("UPDATE withdrawals SET status = ? WHERE id = ?", (new_status, withdrawal_id))
        conn.commit()
        
    else:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        
    conn.close()
    logger.info(f"Admin Action: Withdrawal #{withdrawal_id} updated to {new_status} by Admin {auth_data['id']}")
    return JSONResponse(content={"status": "ok", "message": f"–ó–∞—è–≤–∫–∞ #{withdrawal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_status}"})


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Railway ---
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 8080))
    uvicorn.run(app, host="0.0.0.0", port=PORT)
