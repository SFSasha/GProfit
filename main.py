import os
import logging
import asyncio
import sqlite3
import json
from time import time
from typing import Optional, Dict, List
from urllib.parse import parse_qs, unquote

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates 
from pydantic import BaseModel
import uvicorn

from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")

DB_PATH = "/data/app.db"
BOT_USERNAME = os.environ.get("BOT_USERNAME", "star_miner_bot") 
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
ADMIN_TG_ID = os.environ.get("ADMIN_TG_ID") 

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not WEBAPP_URL:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω WEBAPP_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not ADMIN_TG_ID:
    logger.warning("ADMIN_TG_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")

# === –ú–û–î–ï–õ–ò Pydantic ===

class WithdrawRequest(BaseModel):
    amount: float

class BlastResponse(BaseModel):
    prize_amount: float
    new_stars: float
    new_dynamite: int

class AdminAction(BaseModel):
    withdrawal_id: int
    action: str # 'approve' or 'reject'

class ClaimBonusResponse(BaseModel):
    new_stars: float
    last_claim_time: float # –ù–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –±–æ–Ω—É—Å–∞

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î –∏ –£–¢–ò–õ–ò–¢–´ ===

def get_db_connection():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
    return sqlite3.connect(DB_PATH)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è —Ç–∞–±–ª–∏—Ü—ã."""
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã: –¥–æ–±–∞–≤–ª–µ–Ω–æ last_claim_time
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            stars REAL DEFAULT 0.0,
            dynamite INTEGER DEFAULT 0,
            referrer_id INTEGER,
            referral_earnings REAL DEFAULT 0.0,
            last_claim_time REAL DEFAULT 0.0 -- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –±–æ–Ω—É—Å–∞ (timestamp)
        )
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    try:
        cursor.execute("SELECT last_claim_time FROM users LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE users ADD COLUMN last_claim_time REAL DEFAULT 0.0")

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS withdrawals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            amount REAL,
            status TEXT DEFAULT 'pending', 
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

    conn.commit()
    conn.close()
    logger.info(f"Database initialized at {DB_PATH}")

def get_user(user_id: int, initial_data: Optional[Dict] = None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, username, first_name, stars, dynamite, referrer_id, referral_earnings, last_claim_time FROM users WHERE id = ?", (user_id,))
    user_row = cursor.fetchone()
    
    keys = ["id", "username", "first_name", "stars", "dynamite", "referrer_id", "referral_earnings", "last_claim_time"]

    if user_row:
        user_data = dict(zip(keys, user_row))
        conn.close()
        return user_data
    else:
        # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referrer_id = None
        if initial_data and initial_data.get('start_param'):
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                potential_referrer_id = int(initial_data['start_param'])
                cursor.execute("SELECT id FROM users WHERE id = ?", (potential_referrer_id,))
                if cursor.fetchone():
                     referrer_id = potential_referrer_id
                     # –ù–∞—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä—É –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                     cursor.execute("UPDATE users SET dynamite = dynamite + 1 WHERE id = ?", (referrer_id,))
                     conn.commit()
            except ValueError:
                pass # start_param –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º

        username = initial_data.get('username')
        first_name = initial_data.get('first_name')

        new_user_data = {
            "id": user_id,
            "username": username,
            "first_name": first_name,
            "stars": 0.0,
            "dynamite": 1,
            "referrer_id": referrer_id,
            "referral_earnings": 0.0,
            "last_claim_time": 0.0
        }

        cursor.execute("""
            INSERT INTO users (id, username, first_name, stars, dynamite, referrer_id, referral_earnings, last_claim_time)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (user_id, username, first_name, new_user_data["stars"], new_user_data["dynamite"], 
              new_user_data["referrer_id"], new_user_data["referral_earnings"], new_user_data["last_claim_time"]))
        
        conn.commit()
        conn.close()
        
        return new_user_data

def get_user_referrals_count(user_id: int) -> int:
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(id) FROM users WHERE referrer_id = ?", (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count

def check_init_data_auth(init_data: str) -> Optional[Dict]:
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ initData (—Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥)."""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HMAC
    if not init_data:
        raise HTTPException(status_code=401, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")

    parsed_data = parse_qs(init_data)
    user_data_str = parsed_data.get('user', [None])[0]
    start_param = parsed_data.get('start_param', [None])[0]
    
    if not user_data_str:
        logger.warning("User data missing in initData.")
        raise HTTPException(status_code=401, detail="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    try:
        user_info = json.loads(unquote(user_data_str))
        user_id = user_info.get('id')
        if not user_id:
            raise HTTPException(status_code=401, detail="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        return {
            "id": user_id,
            "username": user_info.get('username'),
            "first_name": user_info.get('first_name'),
            "start_param": start_param
        }

    except Exception as e:
        logger.error(f"Error parsing initData: {e}")
        raise HTTPException(status_code=401, detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")

# === –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º."""
    user_id = update.effective_user.id
    start_url = f"{WEBAPP_URL}?start={user_id}"

    keyboard = [
        [InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å Star Miner App",
            web_app=WebAppInfo(url=start_url)
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Star Miner! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É.",
        reply_markup=reply_markup
    )

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    
    await application.initialize()
    await application.start()
    await application.updater.start_polling(poll_interval=1.0)
    logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

# === –ù–ê–°–¢–†–û–ô–ö–ê FASTAPI (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä) ===
app = FastAPI()
templates = Jinja2Templates(directory="templates") 


@app.on_event("startup")
async def startup_event():
    """–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞."""
    init_db()
    asyncio.create_task(setup_bot())

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è Jinja2."""
    # –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–Ω–∞–ª, –∫—Ç–æ –∞–¥–º–∏–Ω
    admin_id_int = int(ADMIN_TG_ID) if ADMIN_TG_ID and ADMIN_TG_ID.isdigit() else None
    
    return templates.TemplateResponse(
        "index.html", 
        {"request": request, "BOT_USERNAME": BOT_USERNAME, "ADMIN_TG_ID": admin_id_int} 
    )

# === API –≠–ù–î–ü–û–ò–ù–¢–´ ===

@app.post("/api/v1/data")
async def get_user_data(request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è—è initData."""
    try:
        body = await request.json()
        init_data = body.get('init_data')
    except Exception:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")

    auth_data = check_init_data_auth(init_data)
    user_id = auth_data['id']
    
    user = get_user(user_id, auth_data)
    referrals_count = get_user_referrals_count(user_id)
    
    is_admin = False
    if ADMIN_TG_ID and str(user_id) == ADMIN_TG_ID:
        is_admin = True
    
    return JSONResponse(content={
        "status": "ok",
        "user_data": user,
        "referrals_count": referrals_count,
        "bot_username": BOT_USERNAME,
        "is_admin": is_admin
    })

@app.post("/api/v1/claim/bonus", response_model=ClaimBonusResponse)
async def claim_bonus(request: Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±–æ—Ä –±–æ–Ω—É—Å–∞ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç."""
    try:
        body = await request.json()
        init_data = body.get('init_data')
    except Exception:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")

    auth_data = check_init_data_auth(init_data)
    user_id = auth_data['id']
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT stars, last_claim_time FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
    current_stars, last_claim_time = result
    
    current_time = time()
    CLAIM_INTERVAL = 10 * 60 # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    BONUS_AMOUNT = 0.2
    
    if (current_time - last_claim_time) < CLAIM_INTERVAL:
        conn.close()
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        remaining = CLAIM_INTERVAL - (current_time - last_claim_time)
        raise HTTPException(status_code=400, detail=f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(remaining)} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞.")

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
    new_stars = current_stars + BONUS_AMOUNT
    new_claim_time = current_time
    
    cursor.execute("""
        UPDATE users SET stars = ?, last_claim_time = ? WHERE id = ?
    """, (new_stars, new_claim_time, user_id))
    
    conn.commit()
    conn.close()

    return JSONResponse(content={
        "new_stars": new_stars,
        "last_claim_time": new_claim_time
    })


@app.post("/api/v1/chest/blast", response_model=BlastResponse)
async def blast_chest(request: Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑—Ä—ã–≤ —Å—É–Ω–¥—É–∫–∞."""
    # (–õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º)
    try:
        body = await request.json()
        init_data = body.get('init_data')
    except Exception:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")

    auth_data = check_init_data_auth(init_data)
    user_id = auth_data['id']
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT dynamite, stars, referrer_id FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
    current_dynamite, current_stars, referrer_id = result
    
    if current_dynamite <= 0:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∑—Ä—ã–≤—á–∞—Ç–∫–∏.")

    prizes = [0.1, 0.3, 0.5, 1.0, 3.0, 10.0]
    import random
    prize = random.choice(prizes)
    
    referral_commission = prize * 0.10
    
    if referrer_id:
        try:
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É (—Ç–æ–ª—å–∫–æ –∑–≤–µ–∑–¥–∞–º–∏)
            cursor.execute("SELECT stars, referral_earnings FROM users WHERE id = ?", (referrer_id,))
            referrer_data = cursor.fetchone()
            if referrer_data:
                new_ref_stars = referrer_data[0] + referral_commission
                new_ref_earnings = referrer_data[1] + referral_commission
                cursor.execute("""
                    UPDATE users SET stars = ?, referral_earnings = ? WHERE id = ?
                """, (new_ref_stars, new_ref_earnings, referrer_id))
                conn.commit()

        except Exception as e:
            logger.error(f"Failed to credit referrer {referrer_id}: {e}")
            
    new_stars = current_stars + prize
    new_dynamite = current_dynamite - 1
    
    cursor.execute("""
        UPDATE users SET stars = ?, dynamite = ? WHERE id = ?
    """, (new_stars, new_dynamite, user_id))
    
    conn.commit()
    conn.close()

    return JSONResponse(content={
        "prize_amount": prize,
        "new_stars": new_stars,
        "new_dynamite": new_dynamite
    })


@app.post("/api/v1/withdraw/request")
async def request_withdraw(request: Request, data: WithdrawRequest):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥."""
    # (–õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        body = await request.json()
        init_data = body.get('init_data')
    except Exception:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")

    auth_data = check_init_data_auth(init_data)
    user_id = auth_data['id']
    username = auth_data['username'] or f"id_{user_id}"
    amount = data.amount
    
    MIN_WITHDRAW = 10.0
    if amount < MIN_WITHDRAW:
        raise HTTPException(status_code=400, detail=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW} ‚òÖ.")

    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT stars FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
    current_stars = result[0]
    
    if amount > current_stars:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

    new_stars = current_stars - amount
    
    # –°–Ω–∞—á–∞–ª–∞ —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
    cursor.execute("UPDATE users SET stars = ? WHERE id = ?", (new_stars, user_id))
    
    # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    cursor.execute("""
        INSERT INTO withdrawals (user_id, username, amount)
        VALUES (?, ?, ?)
    """, (user_id, username, amount))
    
    conn.commit()
    conn.close()
    
    logger.info(f"Withdrawal requested: User {username} ({user_id}) requested {amount} ‚òÖ")
    
    return JSONResponse(content={
        "status": "ok",
        "message": "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.",
        "new_stars": new_stars
    })

# --- –ê–î–ú–ò–ù –≠–ù–î–ü–û–ò–ù–¢–´ ---

@app.get("/api/v1/admin/withdrawals", response_model=List[Dict])
async def get_withdrawals(request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    try:
        query_params = request.query_params
        init_data = query_params.get('init_data')
        auth_data = check_init_data_auth(init_data)
        if not ADMIN_TG_ID or str(auth_data['id']) != ADMIN_TG_ID:
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    except Exception:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, user_id, username, amount, status, created_at FROM withdrawals WHERE status = 'pending' ORDER BY created_at ASC")
    rows = cursor.fetchall()
    
    keys = ["id", "user_id", "username", "amount", "status", "created_at"]
    withdrawals = [dict(zip(keys, row)) for row in rows]
    
    conn.close()
    return withdrawals

@app.post("/api/v1/admin/action")
async def process_admin_action(request: Request, data: AdminAction):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    try:
        body = await request.json()
        init_data = body.get('init_data')
        auth_data = check_init_data_auth(init_data)
        if not ADMIN_TG_ID or str(auth_data['id']) != ADMIN_TG_ID:
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    except Exception:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        
    withdrawal_id = data.withdrawal_id
    action = data.action
    
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT user_id, amount, status FROM withdrawals WHERE id = ?", (withdrawal_id,))
    withdrawal = cursor.fetchone()
    
    if not withdrawal:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    user_id, amount, current_status = withdrawal
    
    if current_status != 'pending':
        conn.close()
        raise HTTPException(status_code=400, detail=f"–ó–∞—è–≤–∫–∞ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {current_status}")

    if action == 'approve':
        new_status = 'approved'
        # –î–µ–Ω—å–≥–∏ —É–∂–µ —Å–ø–∏—Å–∞–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å.
        cursor.execute("UPDATE withdrawals SET status = ? WHERE id = ?", (new_status, withdrawal_id))
        conn.commit()
        
    elif action == 'reject':
        new_status = 'rejected'
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET stars = stars + ? WHERE id = ?", (amount, user_id))
        cursor.execute("UPDATE withdrawals SET status = ? WHERE id = ?", (new_status, withdrawal_id))
        conn.commit()
        
    else:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        
    conn.close()
    return JSONResponse(content={"status": "ok", "message": f"–ó–∞—è–≤–∫–∞ #{withdrawal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_status}"})


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Railway ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
