import os
import logging
import asyncio
import sqlite3
import hmac
import hashlib
import json  # –î–æ–±–∞–≤–ª–µ–Ω
import random  # –î–æ–±–∞–≤–ª–µ–Ω
from time import time
from typing import Optional, Dict, List
from urllib.parse import parse_qs, unquote

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
import uvicorn

import telegram
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Railway
WEBAPP_URL = os.environ.get("WEBAPP_URL")

if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not WEBAPP_URL:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω WEBAPP_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è! –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–µ–ø–ª–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç, –ø–æ–ª—É—á–∏—Ç–µ URL –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ.")

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
DB_PATH = "/data/app.db" # <-- –î–û–ë–ê–í–õ–ï–ù–û/–ò–°–ü–†–ê–í–õ–ï–ù–û
BOT_USERNAME = os.environ.get("BOT_USERNAME", "star_miner_bot") # <-- –î–û–ë–ê–í–õ–ï–ù–û
ADMIN_TG_ID = os.environ.get("ADMIN_TG_ID") # <-- –î–û–ë–ê–í–õ–ï–ù–û

# === –ú–û–î–ï–õ–ò Pydantic ===
class RequestData(BaseModel):
    init_data: str

class WithdrawRequest(BaseModel):
    init_data: str
    amount: float

class BlastResponse(BaseModel):
    prize_amount: float
    new_stars: float
    new_dynamite: int
    referrer_bonus: float = 0.0

class AdminAction(BaseModel):
    init_data: str
    withdrawal_id: int
    action: str

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î –∏ –£–¢–ò–õ–ò–¢–´ ===

def get_db_connection():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def initialize_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            stars REAL DEFAULT 0.0,
            dynamite INTEGER DEFAULT 3,
            last_blast INTEGER DEFAULT 0,
            referrer_id INTEGER,
            referral_earnings REAL DEFAULT 0.0, -- –ù–û–í–û–ï –ü–û–õ–ï: –î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS withdrawals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            amount REAL,
            status TEXT DEFAULT 'pending', -- pending, approved, rejected
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    conn.commit()
    conn.close()

# –í—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize_db()

# --- –õ–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram Web App ---
# --- –õ–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram Web App ---
# --- –õ–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram Web App (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---
def init_data_auth(init_data: str) -> Dict[str, any]:
    if not init_data:
        raise HTTPException(status_code=401, detail="Auth failed: No init_data provided.")

    try:
        # –í–∞—à –±–æ—Ç-—Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∫–ª—é—á –¥–ª—è HMAC
        key = hmac.new(
            key=TELEGRAM_TOKEN.encode(),
            msg=b"WebAppData",
            digestmod=hashlib.sha256
        ).digest()
    except Exception as e:
        logger.error(f"Error creating HMAC key: {e}")
        raise HTTPException(status_code=500, detail="Internal Auth Error.")
    
    # 1. –†–∞–∑–¥–µ–ª—è–µ–º init_data –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã "–∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ"
    params = init_data.split('&')
    
    # 2. –ò—â–µ–º hash –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    data_check = []
    received_hash = None
    
    for param in params:
        if param.startswith('hash='):
            received_hash = param.split('=', 1)[1]
        elif param.startswith('signature='): # <--- –ù–û–í–û–ï: –ò–°–ö–õ–Æ–ß–ê–ï–ú signature
            continue
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –°–´–†–´–ï –ø–∞—Ä—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            data_check.append(param)

    if not received_hash:
        raise HTTPException(status_code=401, detail="Auth failed: Missing hash.")

    # 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –ø–∞—Ä—ã –ø–æ –∫–ª—é—á—É (–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
    data_check.sort()
    
    # 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ \n (—ç—Ç–æ –∏ –µ—Å—Ç—å data_check_string)
    data_check_string = "\n".join(data_check)
    
    # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö—ç—à
    calculated_hash = hmac.new(
        key=key,
        msg=data_check_string.encode(), # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—ã—Ä—É—é —Å—Ç—Ä–æ–∫—É
        digestmod=hashlib.sha256
    ).hexdigest()

    # 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if calculated_hash != received_hash:
        logger.error(f"Auth failed: Hash mismatch! Calculated: {calculated_hash}, Received: {received_hash}. String checked: {data_check_string}")
        raise HTTPException(status_code=401, detail="Auth failed: Hash mismatch.")

    # ... –æ—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    query_params = parse_qs(unquote(init_data))
    user_data = query_params.get('user', query_params.get('receiver', [None]))[0]
    
    if not user_data:
        raise HTTPException(status_code=401, detail="Auth failed: User data not found.")

    auth_data = json.loads(user_data)
    
    start_param = query_params.get('tgWebAppStartParam', [None])[0]
    if start_param:
        auth_data['start_param'] = start_param
    
    return auth_data


# --- –õ–û–ì–ò–ö–ê –ë–î (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨) ---
INITIAL_STAR_BONUS = 2.0  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
MIN_WITHDRAW = 50.0 # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥

def get_or_create_user(user_id: int, username: str, start_parameter: Optional[str] = None):
    conn = get_db_connection()
    cursor = conn.cursor()

    # 1. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referrer_id = None
        if start_parameter and start_parameter.isdigit() and int(start_parameter) != user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
            potential_referrer_id = int(start_parameter)
            cursor.execute("SELECT id FROM users WHERE id = ?", (potential_referrer_id,))
            if cursor.fetchone():
                referrer_id = potential_referrer_id

        # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–Ω—É—Å–æ–º
        cursor.execute("""
            INSERT INTO users (id, username, stars, dynamite, referrer_id, referral_earnings)
            VALUES (?, ?, ?, ?, ?, 0.0)
        """, (user_id, username, INITIAL_STAR_BONUS, 3, referrer_id))
        conn.commit()

        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        user = cursor.fetchone()
        logger.info(f"New user created: {username} ({user_id}). Referrer: {referrer_id}, Bonus: {INITIAL_STAR_BONUS} ‚òÖ")

    conn.close()
    return dict(user)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    if not ADMIN_TG_ID:
        return False
    return str(user_id) == ADMIN_TG_ID

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ (–ö–û–î –ò–ó –í–ê–®–ï–ì–û –ü–û–°–õ–ï–î–ù–ï–ì–û –§–ê–ô–õ–ê) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App."""
    
    user_id = update.effective_user.id
    start_parameter = context.args[0] if context.args else ""
    
    # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    app_url_with_params = f"{WEBAPP_URL}?tgWebAppStartParam={start_parameter or user_id}"
    
    keyboard = [
        [InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å Star Miner",
            web_app=WebAppInfo(url=app_url_with_params)
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å Web App –∏ –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É –ó–≤–µ–∑–¥!",
        reply_markup=reply_markup
    )

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä) ---
app = FastAPI()
templates = Jinja2Templates(directory=".") # –£–∫–∞–∑–∞–Ω —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞."""
    asyncio.create_task(setup_bot())

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ Web App –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    start_param = request.query_params.get("tgWebAppStartParam")
    return templates.TemplateResponse("index.html", {"request": request, "start_param": start_param})

# --- API –≠–ù–î–ü–û–ò–ù–¢–´ ---

@app.post("/api/v1/data")
async def get_user_data(data: RequestData):
    init_data = data.init_data

    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for data endpoint: {e.detail}")
        raise e

    user_id = auth_data['id']
    username = auth_data.get('username') or f"id_{user_id}"
    # –ü–∞—Ä–∞–º–µ—Ç—Ä tgWebAppStartParam –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    start_param = auth_data.get('start_param')

    user_data = get_or_create_user(user_id, username, start_param)

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
    referrals_count = cursor.fetchone()[0]
    conn.close()

    return JSONResponse(content={
        "user_data": user_data,
        "referrals_count": referrals_count,
        "bot_username": BOT_USERNAME,
        "is_admin": is_admin(user_id)
    })

@app.post("/api/v1/blast", response_model=BlastResponse)
async def blast_mine(data: RequestData):
    init_data = data.init_data

    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for blast endpoint: {e.detail}")
        raise e

    user_id = auth_data['id']

    conn = get_db_connection()
    cursor = conn.cursor()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏—Ç–∞ –∏ –∫—É–ª–¥–∞—É–Ω–∞
    cursor.execute("SELECT stars, dynamite, last_blast, referrer_id FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()

    if not result:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    current_stars, current_dynamite, last_blast, referrer_id = result

    MIN_BLAST_INTERVAL = 15 # —Å–µ–∫—É–Ω–¥ (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    current_time = int(time())

    if current_dynamite <= 0:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ—Ç –¥–∏–Ω–∞–º–∏—Ç–∞ (0 üí£). –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞.")

    if current_time - last_blast < MIN_BLAST_INTERVAL:
        remaining = MIN_BLAST_INTERVAL - (current_time - last_blast)
        conn.close()
        raise HTTPException(status_code=429, detail=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∑—Ä—ã–≤–∞.")

    # 2. –†–∞—Å—á–µ—Ç –¥–æ–±—ã—á–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    PRIZE_AMOUNTS = [0.1, 0.3, 0.5, 1.0, 3.0, 5.0]
    prize_amount = random.choice(PRIZE_AMOUNTS)

    new_stars = current_stars + prize_amount
    new_dynamite = current_dynamite - 1

    referrer_bonus = 0.0

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        UPDATE users
        SET stars = ?,
            dynamite = ?,
            last_blast = ?
        WHERE id = ?
    """, (new_stars, new_dynamite, current_time, user_id))

    # 3. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (10%)
    if referrer_id is not None:
        REFERRAL_PERCENT = 0.10
        referrer_bonus = round(prize_amount * REFERRAL_PERCENT, 2)

        cursor.execute("""
            UPDATE users
            SET stars = stars + ?,
                referral_earnings = referral_earnings + ?
            WHERE id = ?
        """, (referrer_bonus, referrer_bonus, referrer_id))
        logger.info(f"Referral bonus: User {referrer_id} received {referrer_bonus} ‚òÖ from user {user_id}'s blast.")

    conn.commit()
    conn.close()

    return JSONResponse(content={
        "prize_amount": prize_amount,
        "new_stars": new_stars,
        "new_dynamite": new_dynamite,
        "referrer_bonus": referrer_bonus
    })

@app.post("/api/v1/withdraw")
async def request_withdraw(data: WithdrawRequest):
    init_data = data.init_data

    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for withdraw endpoint: {e.detail}")
        raise e

    user_id = auth_data['id']
    username = auth_data.get('username') or f"id_{user_id}"
    amount = data.amount

    if amount < MIN_WITHDRAW:
        raise HTTPException(status_code=400, detail=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW} ‚òÖ.")

    conn = get_db_connection()
    cursor = conn.cursor()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    cursor.execute("SELECT stars FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    current_stars = result[0]

    if amount > current_stars:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

    # 2. –°–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    new_stars = current_stars - amount

    cursor.execute("UPDATE users SET stars = ? WHERE id = ?", (new_stars, user_id))

    # –ó–∞—è–≤–∫–∞ —Å —é–∑–µ—Ä–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    cursor.execute("""
        INSERT INTO withdrawals (user_id, username, amount)
        VALUES (?, ?, ?)
    """, (user_id, username, amount))

    conn.commit()
    conn.close()

    logger.info(f"Withdrawal requested: User {username} ({user_id}) requested {amount} ‚òÖ")

    return JSONResponse(content={
        "status": "ok",
        "message": f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} ‚òÖ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "new_stars": new_stars
    })

# --- –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ API ---

@app.post("/api/v1/admin/withdrawals")
async def get_all_withdrawals(data: RequestData):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫."""
    init_data = data.init_data

    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for admin endpoint: {e.detail}")
        raise e

    if not is_admin(auth_data['id']):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, user_id, username, amount, status, created_at FROM withdrawals ORDER BY created_at DESC")
    withdrawals = [dict(row) for row in cursor.fetchall()]
    conn.close()

    return JSONResponse(content={"withdrawals": withdrawals})


@app.post("/api/v1/admin/action")
async def process_admin_action(data: AdminAction):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ (approve/reject)."""
    init_data = data.init_data
    withdrawal_id = data.withdrawal_id
    action = data.action

    try:
        auth_data = init_data_auth(init_data)
    except HTTPException as e:
        logger.error(f"Auth failed for admin action: {e.detail}")
        raise e

    if not is_admin(auth_data['id']):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT user_id, amount, status FROM withdrawals WHERE id = ?", (withdrawal_id,))
    withdrawal = cursor.fetchone()

    if not withdrawal:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    user_id, amount, current_status = withdrawal

    if current_status != 'pending':
        conn.close()
        raise HTTPException(status_code=400, detail=f"–ó–∞—è–≤–∫–∞ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {current_status}")

    if action == 'approve':
        new_status = 'approved'
        cursor.execute("UPDATE withdrawals SET status = ? WHERE id = ?", (new_status, withdrawal_id))
        conn.commit()

    elif action == 'reject':
        new_status = 'rejected'
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET stars = stars + ? WHERE id = ?", (amount, user_id))
        cursor.execute("UPDATE withdrawals SET status = ? WHERE id = ?", (new_status, withdrawal_id))
        conn.commit()

    else:
        conn.close()
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

    conn.close()
    logger.info(f"Admin Action: Withdrawal #{withdrawal_id} updated to {new_status} by Admin {auth_data['id']}")
    return JSONResponse(content={"status": "ok", "message": f"–ó–∞—è–≤–∫–∞ #{withdrawal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_status}"})

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Railway ---
if __name__ == "__main__":
    # Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
