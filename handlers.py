from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from database import delete_user
from database import (
    get_user, add_user, update_bonus_date, get_top_users_by_stars,
    get_top_users_by_tasks, increment_tasks_done, update_stars,
    create_withdraw_request, get_withdraw_requests, update_withdraw_request, get_withdraw_request_by_id, get_referrals_count
)
from datetime import datetime, timedelta, time
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot
from database import get_conn
import asyncio
import aiogram
import re
from aiogram.exceptions import TelegramBadRequest
import random, string
from aiogram.filters import CommandStart
import aiohttp
import logging
from database import (
    get_user,
    update_stars,
    set_vip,
    get_vip_level,
    update_last_click,
    get_last_click,
    set_referral_bonus_given,
    get_referral_top_for_date, 
    get_all_referral_ranks_for_date,
    get_users_today_count,          # <-- –î–û–ë–ê–í–õ–ï–ù–û
    get_verified_users_today_count,
    get_verified_referrals_count,
    get_referral_top_for_week,
    set_user_verified,
    get_current_multiplier
)
from aiogram.filters import Command
from database import get_top_clicker_users
import json
from database import set_referral_bonus_given, get_referrals_count
from aiogram.types import FSInputFile
import aiohttp
import logging


FLYER_API_KEY = "FL-elIDwf-wTDlrP-ritjwp-mbxRqG"
GROUP_ID_TO_FORWARD = -1002961569525
WITHDRAW_ID_TO_FORWARD = -1002557284206
SUBGRAM_API_KEY = "26d67e0a9c31631bbe7343c415df2d60d47472668ceda4a29c934907314d592b" 
SUBGRAM_API_URL = "https://api.subgram.ru/request-op"




admin_task_creation = {}  # {admin_id: {"step": int, "channel": str, "type": str, "stars": float}}
admin_manual_task_creation = {}  # {admin_id: {"step": int, "title": str, "description": str, "link": str, "stars": float}}
all_referrals = 0
user_states = {}
router = Router()
referrals = {}
admin_adding_channel = {}
ADMIN_PASSWORD = "FREEPASSWORDx1" 
ADMIN_ID = [1500618394,  7829782603]
admin_auth_waiting = set()   # user_id –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –∏ –æ–∂–∏–¥–∞—é—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
admin_sessions = set()       # user_id –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
REQUIRED_CHANNELS = ["@FreeStarsXQ"]
WITHDRAW_OPTIONS = [50, 75, 100, 200]
admin_adding_channel = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞

FIXED_TASKS = [
    {"id": -1, "url": "https://t.me/+VDA7NAoJBbkwZjQy", "check_id": -1002920378443, "stars": 50},
]

def reset_user_states(user_id: int):
    user_states.pop(user_id, None)
    referrals.pop(user_id, None)
    admin_task_creation.pop(user_id, None)
    admin_task_editing.pop(user_id, None)
    admin_coupon_creation.pop(user_id, None)
    admin_adding_channel.pop(user_id, None)

def get_profile_kb(user_id: int):
    # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    buttons = [
        # –î–≤–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º
        [
            InlineKeyboardButton(text="üè∑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate_coupon"),
            InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily_bonus"),
        ],

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –í—ã–≤–æ–¥—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        [
            InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/surnamesks"),
            InlineKeyboardButton(text="–í—ã–≤–æ–¥—ã", url="https://t.me/FreeStarsXQPay")
        ],

        # –î–ª–∏–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        [InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã", callback_data="withdraw")]
    ]
    # –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è
    if user_id in ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        print("user_id:", user_id, "ADMIN_ID:", ADMIN_ID, "check:")

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –≤—Å–µ—Ö
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
statistics_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è", callback_data="stat_referrals_today")], 
    [InlineKeyboardButton(text="üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="show_weekly_top")],
    [InlineKeyboardButton(text="–¢–æ–ø –∫–ª–∏–∫–µ—Ä–∞", callback_data="clicker_top")],
    [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu"),
    ]
])

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤–Ω—É—Ç—Ä–∏ —Ç–æ–ø–∞ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–∑–∞–¥)
statistics_back_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="statistics")]
])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (InlineKeyboardMarkup)
main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üë§ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å üë§", callback_data="profile"),
    ],
    [
        InlineKeyboardButton(text="‚ú® –ö–ª–∏–∫–µ—Ä ‚ú®", callback_data="clicker"),
    ],
    [
        InlineKeyboardButton(text="VIP-–ü—Ä–æ–º–æ", url="https://t.me/+jZY37XZ12Cw0NjZi"),
        InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è", callback_data="tasks"),
    ],
    [
        InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Åc—ã–ª–∫–∞", callback_data="ref_link"),
    ]
])
vip_help_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="VIP-–ø–æ–¥–ø–∏—Å–∫–∞ I —Å—Ç–µ–ø–µ–Ω–∏  ", url="https://t.me/+3XXGoaVvI7ViNTQy"),
        InlineKeyboardButton(text="VIP-–ü–æ–¥–ø–∏—Å–∫–∞ II —Å—Ç–µ–ø–µ–Ω–∏", url="https://t.me/+jZY37XZ12Cw0NjZi"),
        InlineKeyboardButton(text="VIP-–ü–æ–¥–ø–∏—Å–∫–∞ III —Å—Ç–µ–ø–µ–Ω–∏", url="https://t.me/+VDA7NAoJBbkwZjQy")
    ],
    [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")
    ]
])

main_menu_reply_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)


admin_main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã", callback_data="admin_requests")],
    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_stats")],
    [
    InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="admin_users"),
    InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_vip_users")
    ],
    [
    InlineKeyboardButton(text="üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞–º–∏", callback_data="admin_coupons"),
    InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω", callback_data="admin_add_coupon")
    ],
    [
    InlineKeyboardButton(text="üéØ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_tasks_list"),
    InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_add_task")
    ],
    [InlineKeyboardButton(text="üõ† –†—É—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="admin_manual_tasks")],
    [InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data="admin_broadcast")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")]
])


# –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É ‚Äî –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
def admin_request_actions_kb(req_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"req_{req_id}_approve"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"req_{req_id}_reject")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫", callback_data="admin_requests")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")]
    ])

backs_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")]
            ])


# –ö–æ–¥—ã —Å—Ç—Ä–∞–Ω –°–ù–ì
ALLOWED_COUNTRY_CODES = [
    "+7",   # –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    "+373", # –ú–æ–ª–¥–æ–≤–∞
    "+374", # –ê—Ä–º–µ–Ω–∏—è
    "+375", # –ë–µ–ª–∞—Ä—É—Å—å
    "+380", # –£–∫—Ä–∞–∏–Ω–∞
    "+992", # –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω
    "+993", # –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω
    "+994", # –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω
    "+995", # –ì—Ä—É–∑–∏—è
    "+996", # –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω
    "+998",  # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
    "+48",
    "+353"
]

def normalize_phone(phone: str) -> str:
    digits = ''.join(filter(str.isdigit, phone))
    if digits.startswith("00"):
        digits = digits[2:]
    return f"+{digits}"

def update_user_phone(user_id: int, phone: str):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("UPDATE users SET phone = ? WHERE id = ?", (phone, user_id))
    conn.commit()

def create_contact_keyboard() -> ReplyKeyboardMarkup:
    button = KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)
    return ReplyKeyboardMarkup(
        keyboard=[[button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.filters import CommandStart
# ... (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã, –≤–∫–ª—é—á–∞—è database, keyboards –∏ flyer_check_subscription)

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    user = message.from_user
    user_id = user.id
    username = user.username
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()

    user_db = get_user(user_id)
    
    # --- –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
    is_fully_registered = False
    if user_db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ 'is_verified' (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 1 = True)
        is_verified = user_db.get("is_verified")
        
        if is_verified == 1:
             is_fully_registered = True
    # -----------------------------------------------------

    if user_db:
        # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –£–ñ–ï –≤ –±–∞–∑–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
        if is_fully_registered:

            # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é/—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.
            data = await flyer_check_subscription(user_id, message)

            if data.get("skip"):
                # ... –í—ã–≤–æ–¥ –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ...
                photo = FSInputFile("profile.png") 
                msg = (
                    f"üìãüë• <i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!</i>\n\n"
                    f"<blockquote>–ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ = —á–µ—Å—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã üíé\n‚õîÔ∏è –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</blockquote>"
                )

                await message.answer_photo(
                    photo=photo,
                    caption=msg,
                    parse_mode="HTML",
                    reply_markup=main_menu_kb # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                )
            else:
                # ... –í—ã–≤–æ–¥ –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–û–î–ü–ò–°–ö–ò ...
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
                    ]
                )
                await message.answer(
                    data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã üëÜ"),
                    reply_markup=kb
                )

        else:
            # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –µ—Å—Ç—å, –Ω–æ –ù–ï –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é).
            msg = (
            "–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–æ—Ç–∞\n\n"
            "<blockquote>üìå –ù–æ–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n"
            "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞(—Ç–æ–ª—å–∫–æ –°–ù–ì).</blockquote>"
            )
            await message.answer(
                text=msg, 
                parse_mode="HTML", 
                reply_markup=create_contact_keyboard() # –ü—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç
            )

        return


    # --------------------------------------------------------------------------
    # --- –ë–õ–û–ö –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    # --------------------------------------------------------------------------
    
    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (user_db –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    args = message.text.split()
    referrer_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (is_verified –±—É–¥–µ—Ç 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    add_user(user_id, username, referrer_id, full_name)

    msg = (
        "–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–π –Ω–∞–∫—Ä—É—Ç–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–µ—á–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–æ—Ç–∞, –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! ü´Ç\n\n"
        "<blockquote>üìå –ù–æ–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—à–µ–π –±–∞–∑–µ. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞(—Ç–æ–ª—å–∫–æ –°–ù–ì).</blockquote>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        text=msg, 
        parse_mode="HTML", 
        reply_markup=create_contact_keyboard() # –ü—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç
    )

async def flyer_check_subscription(user_id: int, message: types.Message):
    if user_id == 1500618394:
        return {"skip": True}  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —ç—Ç–æ–≥–æ ID
    url = "https://api.flyerservice.io/check"
    headers = {"Content-Type": "application/json"}
    payload = {
        "key": FLYER_API_KEY,
        "user_id": user_id,
        "language_code": message.from_user.language_code or "ru",
        "message": {
            "text": "<b>‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω!</b>\n–£ –Ω–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –∏ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ üëá \n\n‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞\n<i>–≠—Ç–æ –Ω—É–∂–Ω–æ –∑–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑: –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Üí –±–æ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Üí –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ —Å–æ–±–∏—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã –∏ –±–æ–Ω—É—Å—ã </i>\n\nüí´ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—Éüî•",
            "button_bot": "üîó –°–ø–æ–Ω—Å–æ—Ä",
            "button_channel": "üîó –°–ø–æ–Ω—Å–æ—Ä",
            "button_boost": "üîó –°–ø–æ–Ω—Å–æ—Ä",
            "button_url": "üîó –°–ø–æ–Ω—Å–æ—Ä",
            "button_fp": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        }
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as resp:
                if resp.status != 200:
                    logging.error(f"[FlyerAPI] –û—à–∏–±–∫–∞ {resp.status}, —Ç–µ–∫—Å—Ç: {await resp.text()}")
                    return {"skip": False, "error": f"Flyer API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({resp.status})"}

                try:
                    data = await resp.json()
                    logging.info(f"[FlyerAPI] –û—Ç–≤–µ—Ç: {data}")
                    return data
                except Exception as e:
                    text = await resp.text()
                    logging.error(f"[FlyerAPI] –ù–µ JSON: {e}, –æ—Ç–≤–µ—Ç: {text}")
                    return {"skip": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Flyer API"}
    except Exception as e:
        logging.error(f"[FlyerAPI] –û—à–∏–±–∫–∞: {e}")
        return {"skip": False, "error": str(e)}


@router.callback_query(F.data == "fp_check")
async def flyer_check_done(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = await flyer_check_subscription(user_id, callback.message)
    logging.info(f"[Flyer CHECK DONE] –û—Ç–≤–µ—Ç: {data}")

    if not data.get("skip"):
        # ‚ùå –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
        try:
            await callback.message.delete()
        except:
            pass
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        await callback.message.answer(
            data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã üëÜ"),
            reply_markup=kb
        )

    else:
        # ‚úÖ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        try:
            await callback.message.delete()
        except:
            pass
            photo = FSInputFile("profile.png")  # —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            msg = (
                f"üìãüë• <i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!</i>\n\n"
                f"<blockquote>–ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ = —á–µ—Å—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã üíé\n‚õîÔ∏è –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</blockquote>"
            )

            await callback.message.answer_photo(
                photo=photo,
                caption=msg,
                parse_mode="HTML",
                reply_markup=main_menu_kb
            )

        # üü¢ –õ–û–ì–ò–ö–ê –ë–û–ù–£–°–ê (–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –ü–û–î–ü–ò–°–ö–ò)
        user_db = get_user(user_id) 
        referrer_id = user_db.get("referrer_id")
        bonus_already_given = user_db.get("referral_bonus_given")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        username = callback.from_user.username
        full_name = f"{callback.from_user.first_name or ''} {callback.from_user.last_name or ''}".strip()
        username_for_message = f"@{username}" if username else full_name

        # –ù–∞—á–∏—Å–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä –ò –±–æ–Ω—É—Å –ï–©–ï –ù–ï –≤—ã–¥–∞–Ω
        if referrer_id and not bonus_already_given: 
            # 1. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥
            update_stars(referrer_id, 5, reason="referral_bonus")

            # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞
            set_referral_bonus_given(user_id) 

            # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try:
                await callback.bot.send_message(
                    referrer_id,
                    f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_for_message} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +5 ‚≠êÔ∏è"
                )
            except Exception as e:
                print(f"[flyer_check_done] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {referrer_id}: {e}")

    await callback.answer()
    await callback.answer()
def get_subgram_check_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ SubGram."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subgram_check")] 
    ])

async def request_op_subgram(user: types.User, chat_id: int, action: str = "subscribe") -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –≤ SubGram API.
    """
    user_id = user.id
    allowed_actions = ["subscribe", "newtask"]

    # üõë –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–©–ï–ù–ê –í–í–ï–†–•
    if action not in allowed_actions:
        logging.warning(f"[SubGram] ‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π action '{action}'. –ò—Å–ø–æ–ª—å–∑—É–µ–º 'subscribe'.")
        action = "subscribe"

    # 1. –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º action)
    logging.info(f"[SubGram] ‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞—Ç. UserID: {user_id}, ChatID: {chat_id}, Action: {action}")

    url = SUBGRAM_API_URL

    payload = {
        "UserId": str(user_id),
        "ChatId": str(chat_id),
        "first_name": user.first_name or "Unknown",
        "language_code": user.language_code or "ru",
        "Premium": user.is_premium,
        "action": action, # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        "message": {
            "text": "<b>‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω!</b>\n–£ –Ω–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –∏ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ üëá \n\n‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞\n<i>–≠—Ç–æ –Ω—É–∂–Ω–æ –∑–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑: –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Üí –±–æ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Üí –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ —Å–æ–±–∏—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã –∏ –±–æ–Ω—É—Å—ã </i>\n\nüí´ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—Éüî•",
            "button_bot": "üîó –°–ø–æ–Ω—Å–æ—Ä",
            "button_channel": "üîó –°–ø–æ–Ω—Å–æ—Ä",
            "button_boost": "üîó –°–ø–æ–Ω—Å–æ—Ä",
            "button_url": "üîó –°–ø–æ–Ω—Å–æ—Ä",
            "button_fp": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        }
    }

    headers = {
        "Auth": SUBGRAM_API_KEY, 
        "Content-Type": "application/json"
    }

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ payload
    logging.info(f"[SubGram] üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ Payload: {json.dumps(payload, ensure_ascii=False)}")
    logging.info(f"[SubGram] üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Auth Key: {'***' + SUBGRAM_API_KEY[-4:] if SUBGRAM_API_KEY else '–ù–ï–¢'}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as resp:

                # 1. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (5xx), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
                if resp.status >= 500:
                    text = await resp.text()
                    logging.error(f"[SubGram] ‚ùå –û–®–ò–ë–ö–ê HTTP {resp.status} (–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞). –û—Ç–≤–µ—Ç: {text}")
                    return {"status": "error", "code": resp.status, "message": f"–°–µ—Ä–≤–µ—Ä SubGram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {resp.status}"}

                data = await resp.json()
                logging.info(f"[SubGram] üìÑ –û—Ç–≤–µ—Ç JSON: {json.dumps(data, ensure_ascii=False)}")

                # 2. –ï—Å–ª–∏ HTTP-—Å—Ç–∞—Ç—É—Å != 200, –Ω–æ —ç—Ç–æ –Ω–µ 5xx, —Ç–æ SubGram, –≤–µ—Ä–æ—è—Ç–Ω–æ, –≤–µ—Ä–Ω—É–ª JSON —Å –æ—à–∏–±–∫–æ–π
                # –õ–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å –∫–ª—é—á–æ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ JSON –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–∞ 404/warning
                if resp.status != 200:
                    # –ï—Å–ª–∏ SubGram –≤–µ—Ä–Ω—É–ª 404, –Ω–æ –≤ JSON —Å—Ç–∞—Ç—É—Å 'ok' –∏ –∫–æ–¥ 404 (–ù–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π), 
                    # —Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –∏ –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SubGram Wrapper –µ–≥–æ –ø–æ–π–º–∞–µ—Ç.
                    if not (data.get("status") in ('warning', 'ok') and data.get("code") in (200, 404)):
                         logging.error(f"[SubGram] ‚ùå –û–®–ò–ë–ö–ê HTTP {resp.status}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á Auth, –æ—Ç–≤–µ—Ç JSON: {data}")

                return data

    except aiohttp.ClientConnectorError as e:
        logging.error(f"[SubGram] üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return {"status": "error", "code": 503, "message": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SubGram API: {e}"}
    except Exception as e:
        logging.error(f"[SubGram] üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return {"status": "error", "code": 500, "message": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}


async def subgram_check_wrapper(user: types.User, message: types.Message, action: str = "subscribe"):

    """–û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É SubGram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = user.id

    if user_id == 1500618394:
        return {"skip": True}  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —ç—Ç–æ–≥–æ ID
    
    # üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º action –≤ request_op_subgram
    data = await request_op_subgram(user, message.chat.id, action=action)
    status = data.get("status")
    code = data.get("code")
    links = data.get("links", []) # –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å


    if status == 'ok' and code == 200:
        logging.info(f"[SubGram Wrapper] ‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã.")
        return {"skip": True}

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: 
    # –¢—Ä–µ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "warning" –ò–õ–ò "gender" (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —Å–º–æ–≥–ª–∏ –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å links)
    if status in ('warning'):

        if links:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ï—Å—Ç—å —Å—Å—ã–ª–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö (–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ!)
            logging.info(f"[SubGram Wrapper] ‚õîÔ∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ü–ò–°–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å –∫–∞–Ω–∞–ª–∞–º–∏.")

            message_text = "<b>‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω!</b>\n–£ –Ω–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –∏ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ üëá \n\n‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞\n<i>–≠—Ç–æ –Ω—É–∂–Ω–æ –∑–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑: –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Üí –±–æ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Üí –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ —Å–æ–±–∏—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã –∏ –±–æ–Ω—É—Å—ã </i>\n\nüí´ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—Éüî•"
            for link in links:
                message_text += f"üîó {link}\n"

            message_text += "\nüí´ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É!"
            await message.answer(
                message_text,
                parse_mode="HTML"            )
            # üõë skip: False - –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–µ—Ä
            return {"skip": False, "status": status, "code": code} 

        else:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°—Ç–∞—Ç—É—Å 'warning'/'gender', –Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç.
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –≤—ã–¥–∞–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –æ—à–∏–±–∫—É API.
            
            # üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–≥–µ

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
            await message.answer(
                "‚òùÔ∏è –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚òùÔ∏è",
                reply_markup=get_subgram_check_kb()
            )
            # üõë skip: False - –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–µ—Ä
            return {"skip": False, "status": status, "code": code} 

    logging.warning(f"[SubGram Wrapper] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç SubGram. Data: {data}")
    return {"skip": True}


@router.callback_query(F.data == "subgram_check")
async def subgram_check_done(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ (action="subscribe")
    # subgram_check_wrapper –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"skip": True}, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏.
    data = await subgram_check_wrapper(
        user=callback.from_user,
        message=callback.message, 
        action="subscribe"
    )

    skip_status = data.get("skip")
    # 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    logging.info(f"[Callback] SubGram Wrapper —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {user_id}: skip={skip_status}, Status={data.get('status')}, Code={data.get('code')}")

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if skip_status:
        # ‚úÖ –£–°–ü–ï–•: –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            await callback.message.edit_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ SubGram –ø—Ä–æ–π–¥–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            logging.warning(f"[Callback] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")

        # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ 
        await clicker_start(callback) 

        # üí° –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!", show_alert=False)

    else:
        # ‚ùå –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê (subgram_check_wrapper —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏)
        logging.info(f"[Callback] ‚õîÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SubGram –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {user_id}.")

        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.answer("‚õîÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã.", show_alert=True)


async def daily_reward_task(bot: Bot):
    print("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞–ø—É—â–µ–Ω–∞.")
    while True:
        now = datetime.utcnow()
        
        # üéØ –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: 21:01:00 UTC (—ç—Ç–æ 00:01:00)
        target_time_utc = time(hour=21, minute=1) 
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è
        target_datetime_today = datetime.combine(now.date(), target_time_utc)
        
        # –ï—Å–ª–∏ 21:01 UTC —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if now >= target_datetime_today:
            target_datetime = datetime.combine(now.date() + timedelta(days=1), target_time_utc)
        else:
            target_datetime = target_datetime_today
            
        sleep_seconds = (target_datetime - now).total_seconds()
        
        print(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥ (00:01) —á–µ—Ä–µ–∑ {sleep_seconds / 3600:.2f} —á–∞—Å–æ–≤.")
        await asyncio.sleep(sleep_seconds)

        print("–í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ! –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...")
        
        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ —Ç–æ–ø–∞ –≤—Å–µ–≥–¥–∞ –∏–¥–µ—Ç –∑–∞ –ü–†–ï–î–´–î–£–©–ò–ô –¥–µ–Ω—å
        yesterday_iso = (datetime.utcnow().date() - timedelta(days=1)).isoformat()
        winners = get_referral_top_for_date(yesterday_iso, limit=5)
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ä–∞–Ω–≥–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º
        all_yesterday_ranks = get_all_referral_ranks_for_date(yesterday_iso)

        if not winners:
            print("–ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        prizes = [25, 20, 15, 10, 7]
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        
        # –ì–æ—Ç–æ–≤–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        announcement_lines = [f"üèÜ **–¢–æ–ø-5 –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º –∑–∞ –≤—á–µ—Ä–∞**", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –Ω–∞—à–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n"]
        for i, winner in enumerate(winners):
            prize = prizes[i]
            # –Ø –≤–µ—Ä–Ω—É–ª Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (**), —á—Ç–æ–±—ã –∏–º–µ–Ω–∞ –∏ –ø—Ä–∏–∑—ã –±—ã–ª–∏ –∂–∏—Ä–Ω—ã–º–∏
            line = f"{medals[i]} **{winner['name']}** ‚Äî {winner['count']} —á–µ–ª–æ–≤–µ–∫. –ù–∞–≥—Ä–∞–¥–∞: **{prize}** ‚≠êÔ∏è"
            announcement_lines.append(line)
            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
            update_stars(winner['id'], prize, reason=f"–ü—Ä–∏–∑ –∑–∞ —Ç–æ–ø #{i+1} –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º")
        
        base_announcement_text = "\n".join(announcement_lines) + "\n\n–ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–Ω—è—Ç—å —Ö–æ—Ä–æ—à–∏–µ –º–µ—Å—Ç–∞! –£–¥–∞—á–∏! üöÄ"

        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        conn = get_conn()
        cur = conn.cursor()
        cur.execute("SELECT id FROM users")
        all_user_ids = [row[0] for row in cur.fetchall()]
        
        print(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        for user_id in all_user_ids:
            personal_message = base_announcement_text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            my_rank_data = all_yesterday_ranks.get(user_id)
            if my_rank_data:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                personal_message += f"\n\n–í—ã –≤—á–µ—Ä–∞ –∑–∞–Ω—è–ª–∏ **{my_rank_data['rank']}-–µ –º–µ—Å—Ç–æ**, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ {my_rank_data['count']} –¥—Ä—É–∑–µ–π. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"

            try:
                await bot.send_message(user_id, personal_message, parse_mode="Markdown")
                await asyncio.sleep(0.05) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Telegram API
            except Exception:
                continue
        print("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É
        if isinstance(GROUP_ID_TO_FORWARD, int):
            try:
                # –í –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                await bot.send_message(GROUP_ID_TO_FORWARD, base_announcement_text, parse_mode="Markdown")
                print(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID_TO_FORWARD}.")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID_TO_FORWARD}. –û—à–∏–±–∫–∞: {e}")

# handlers.py
BOT_USERNAME = "starsflowxbot"  # –µ—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–µ –∏–º—è ‚Äî –∑–∞–º–µ–Ω–∏

async def user_has_referral_in_bio(user_id: int, bot) -> bool:
    try:
        chat = await bot.get_chat(user_id)
        bio = getattr(chat, "bio", "") or ""
        referral_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        return referral_link in bio or f"t.me/{BOT_USERNAME}?start={user_id}" in bio
    except:
        return False
from typing import List, Tuple
async def format_weekly_referral_top(top_list: List[Tuple[int, int]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç."""
    if not top_list:
        return "üòî *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤* –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!"

    top_text = "*üèÜ –¢–û–ü-10 –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –ù–µ–¥–µ–ª—é üèÜ*\n\n"
    
    for i, (user_id, count) in enumerate(top_list):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –µ–≥–æ @username
        # (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è get_user –¥–æ—Å—Ç—É–ø–Ω–∞)
        user = get_user(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—à–ª–∏ (—Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not user:
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—Ç–∞
        if i == 0:
            emoji = "ü•á"
        elif i == 1:
            emoji = "ü•à"
        elif i == 2:
            emoji = "ü•â"
        else:
            emoji = f"{i + 1}."

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        if user['username']:
            # –ï—Å–ª–∏ –µ—Å—Ç—å username, –¥–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É
            user_link = f"@{user['username']}"
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç username, –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º ID
            user_link = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{user_id}"

        top_text += f"{emoji} *{user_link}* - {count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    # -------------------------

    return top_text

# ‚úÖ –î–û–ë–ê–í–õ–ï–ù bot: Bot –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
@router.callback_query(F.data == "show_weekly_top") 
async def cmd_weekly_referral_top(call_or_message: types.CallbackQuery | types.Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ: –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (CallbackQuery) –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ (Message)
    if isinstance(call_or_message, types.CallbackQuery):
        message = call_or_message.message
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
        await call_or_message.answer() 
    else:
        message = call_or_message

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∞ (—Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞, await –Ω–µ –Ω—É–∂–µ–Ω)
    top_list = get_referral_top_for_week()
    
    # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (‚úÖ –ü–ï–†–ï–î–ê–ï–ú bot)
    top_message = await format_weekly_referral_top(top_list, bot)
    
    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        top_message,
        parse_mode="Markdown",
        reply_markup=get_back_to_menu_keyboard()
    )
    
def get_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    # –ò–∑–º–µ–Ω—è–µ–º callback_data –Ω–∞ "back_to_menu", —á—Ç–æ–±—ã –æ–Ω —Å–æ–≤–ø–∞–¥–∞–ª —Å –≤–∞—à–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu") 
    return InlineKeyboardMarkup(inline_keyboard=[[back_button]])

async def format_weekly_referral_top(top_list: List[Tuple[int, int]], bot: Bot) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç."""
    
    top_text = "*üèÜ –¢–û–ü-10 –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –ù–µ–¥–µ–ª—é üèÜ*\n\n"
    
    if not top_list:
        return "üòî *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤* –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!"

    
    for i, (user_id, count) in enumerate(top_list):
        user_link = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{user_id}" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        try:
            # üí° –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º await bot.get_chat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            chat = await bot.get_chat(user_id)
            
            # ‚úÖ –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —Å @username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if chat.username:
                user_link = f"@{chat.username}"
            elif chat.full_name:
                user_link = chat.full_name # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
            
        except Exception as e: 
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
            print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
            user_link = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{user_id} (–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—Ç–∞
        if i == 0:
            emoji = "ü•á"
        elif i == 1:
            emoji = "ü•à"
        elif i == 2:
            emoji = "ü•â"
        else:
            emoji = f"{i + 1}."

        top_text += f"{emoji} *{user_link}* - {count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"

    return top_text

@router.callback_query(lambda c: c.data == "stat_referrals_today")
async def stat_referrals_today_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–¢–´: –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, —Å–º–µ—â–µ–Ω–Ω—É—é –Ω–∞ +3 —á–∞—Å–∞ (–ú–°–ö) ---
    today_iso = (datetime.utcnow() + timedelta(hours=3)).date().isoformat()
    
    top_users = []
    all_ranks = {}
    
    # --- –ë–õ–û–ö 1: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• ---
    try:
        # –ü–†–ï–î–ü–û–õ–ê–ì–ê–ï–¢–°–Ø, –ß–¢–û –≠–¢–ò –§–£–ù–ö–¶–ò–ò –î–û–°–¢–£–ü–ù–´
        top_users = get_referral_top_for_date(today_iso, limit=5) 
        all_ranks = get_all_referral_ranks_for_date(today_iso) 
    except Exception as db_e:
        # ... (–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ë–î –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
        print(f"[FATAL ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î –≤ stat_referrals_today_cb: {db_e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–ø.")
        return 

    # -------------------------------------------------------------
    # --- –ë–õ–û–ö 2: –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø –í–°–ï–ì–î–ê –í–ò–î–ù–´–• –ù–ê–ì–†–ê–î) ---
    # -------------------------------------------------------------
    title = "üèÜ –¢–æ–ø-5 –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ø–∞
    top_block_text = ""
    medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
    
    # 1. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–û–ì–û –ë–õ–û–ö–ê –¢–û–ü–ê (–∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏)
    if not top_users:
        # –ï—Å–ª–∏ —Ç–æ–ø –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        top_block_text = f"<b>{title}</b>\n\n–°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª –¥—Ä—É–∑–µ–π. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!"
    else:
        # –ï—Å–ª–∏ —Ç–æ–ø –Ω–µ –ø—É—Å—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ 
        lines = [f"<b>{title}</b>\n"]
        for i in range(5):
            emoji = medals[i]
            
            if i < len(top_users):
                user_data = top_users[i]
                lines.append(f"{emoji} <b>{user_data['name']}</b> ‚Äî {user_data['count']} —á–µ–ª–æ–≤–µ–∫")
            else:
                lines.append(f"{emoji} <i>–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–≥–ª–∞—à–∞–π –ø–µ—Ä–≤—ã–º!</i>")
                
        top_block_text = "\n".join(lines)


    # 2. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ë–õ–û–ö–ê –ù–ê–ì–†–ê–î (–í–´–ù–ï–°–ï–ù–û –ò–ó IF/ELSE, –û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø –í–°–ï–ì–î–ê)
    weekly_reward_html = (
        "\n\n<blockquote><b>–ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –¢–æ–ø-5 –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–æ–ø–∞:</b>\n"
        "1 –º–µ—Å—Ç–æ: 30 ‚≠êÔ∏è\n"
        "2 –º–µ—Å—Ç–æ: 20 ‚≠êÔ∏è\n"
        "3 –º–µ—Å—Ç–æ: 10 ‚≠êÔ∏è\n"
        "4 –º–µ—Å—Ç–æ: 8 ‚≠êÔ∏è\n"
        "5 –º–µ—Å—Ç–æ: 5 ‚≠êÔ∏è"
        "</blockquote>"
    )
    
    # 3. –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: –¢–æ–ø + –ù–∞–≥—Ä–∞–¥—ã
    final_text = top_block_text + weekly_reward_html


    # 4. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò
    my_rank_data = all_ranks.get(user_id)
    if my_rank_data:
        final_text += f"\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: <b>{my_rank_data['rank']}</b> ({my_rank_data['count']} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö)"

    # --- –ë–õ–û–ö 3: –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï/–û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ---
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_text
        await callback.message.edit_caption(
            caption=final_text, 
            parse_mode="HTML",
            reply_markup=statistics_back_kb # –ü–†–ï–î–ü–û–õ–ê–ì–ê–ï–¢–°–Ø, –ß–¢–û –≠–¢–ê –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–û–°–¢–£–ü–ù–ê
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass 
        else:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_text
                await callback.message.edit_text(
                    text=final_text,
                    parse_mode="HTML",
                    reply_markup=statistics_back_kb
                )
            except TelegramBadRequest:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_text
                await callback.message.answer(
                    final_text,
                    parse_mode="HTML",
                    reply_markup=statistics_back_kb
                )
            except Exception as inner_e:
                print(f"[FINAL ERROR IN EDIT_TEXT] {inner_e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_text
                await callback.message.answer(final_text, parse_mode="HTML", reply_markup=statistics_back_kb)

    except Exception as final_e:
        print(f"[FINAL CATCH ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ edit/answer: {final_e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_text
        await callback.message.answer(final_text, parse_mode="HTML", reply_markup=statistics_back_kb)
        
    await callback.answer()


processing_bonus = set()

@router.callback_query(F.data == "bio_bonus")
async def bio_bonus_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    bot = callback.bot
    data_subgram = await subgram_check_wrapper(user=callback.from_user, message=callback.message, action="subscribe")
    if not data_subgram.get("skip"):
        # Wrapper —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback
        await callback.answer()
        return
    # üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    if user_id in processing_bonus:
        await callback.answer("‚è≥ –ë–æ–Ω—É—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...", show_alert=True)
        return

    processing_bonus.add(user_id)

    try:
        user = get_user(user_id)
        if not user:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start", show_alert=True)
            return

        today = datetime.now().date().isoformat()
        last_bonus_date = user.get("last_bio_bonus_date")
        bio_bonus_revoked = user.get("bio_bonus_revoked") or 0

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∏–æ
        has_link = await user_has_referral_in_bio(user_id, bot)

        if not has_link:
            expected_text = (
                "‚õîÔ∏è –í –≤–∞—à–µ–π –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.\n\n"
                f"–î–æ–±–∞–≤—å—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å +3 ‚≠ê –∫–∞–∂–¥—ã–π –¥–µ–Ω—å:\n"
                f"<code>https://t.me/{BOT_USERNAME}?start={user_id}</code>\n\n"
                "üìå –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –±–∏–æ:\n"
                "‚îÇ 1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å Telegram.\n"
                "‚îÇ 2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'.\n"
                "‚îÇ 3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ '–û —Å–µ–±–µ' (Bio).\n"
                "‚îÇ 4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å."
        )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="bio_bonus")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")]
            ])

            # ‚ö°Ô∏è –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if callback.message.text != expected_text:
                    await callback.message.edit_text(expected_text, parse_mode="HTML", reply_markup=keyboard)
                else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–∞–∫–æ–π –∂–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
                    await callback.answer("‚è≥ –ï—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É", show_alert=True)
            except Exception:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ª–æ–≤–∏–º –ª—é–±—É—é –æ—à–∏–±–∫—É TelegramBadRequest
                await callback.answer("‚è≥ –ï—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É", show_alert=True)

            return

        # üîÑ –í–æ–∑–≤—Ä–∞—Ç –±–æ–Ω—É—Å–∞, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω
        if bio_bonus_revoked == 1 and has_link:
            update_stars(user_id, 3, reason="bio_bonus_restored")
            conn = get_conn()
            cur = conn.cursor()
            cur.execute("UPDATE users SET bio_bonus_revoked = 0 WHERE id = ?", (user_id,))
            conn.commit()
            await callback.message.answer("üéâ –í—ã –≤–µ—Ä–Ω—É–ª–∏ —Å—Å—ã–ª–∫—É –≤ –±–∏–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ 3 ‚≠ê!")

        # üõë –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–µ–Ω –ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
        if last_bonus_date == today:
            next_bonus_time = (datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) 
                               + timedelta(days=1)).strftime("%H:%M")
            await callback.answer(
                f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüéÅ –°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ {next_bonus_time}",
                show_alert=True
            )
            return

        # ‚úÖ –í—ã–¥–∞—ë–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
        update_stars(user_id, 3, reason="bio_daily_bonus")
        conn = get_conn()
        cur = conn.cursor()
        cur.execute(
            "UPDATE users SET last_bio_bonus_date = ?, bio_bonus_revoked = 0 WHERE id = ?",
            (today, user_id)
        )
        conn.commit()
        await callback.message.answer("üéâ –ë–æ–Ω—É—Å –∑–∞ —Å—Å—ã–ª–∫—É –≤ –±–∏–æ –±—ã–ª –ø–æ–ª—É—á–µ–Ω: +3 ‚≠ê\nüìå –ù–µ –∑–∞–±—É–¥—å –ø–æ–ª—É—á–∏—Ç—å –∏ –∑–∞–≤—Ç—Ä–∞!")

    finally:
        processing_bonus.discard(user_id)





async def auto_check_bio_links(bot):
    while True:
        try:
            conn = get_conn()
            cur = conn.cursor()
            cur.execute("""
                SELECT id, last_bio_bonus_date FROM users
                WHERE last_bio_bonus_date IS NOT NULL
                AND (bio_bonus_revoked = 0 OR bio_bonus_revoked IS NULL)
            """)
            users = cur.fetchall()

            for row in users:
                user_id = row["id"]
                last_bonus_date = row["last_bio_bonus_date"]

                if not last_bonus_date:
                    continue

                last_time = datetime.fromisoformat(last_bonus_date)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
                if datetime.now() - last_time < timedelta(hours=24):
                    has_link = await user_has_referral_in_bio(user_id, bot)
                    if not has_link:
                        # ‚õîÔ∏è –°–Ω–∏–º–∞–µ–º 5 ‚≠ê –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –±–æ–Ω—É—Å
                        update_stars(user_id, -3, reason="bio_bonus_revoked")
                        cur2 = conn.cursor()
                        cur2.execute("UPDATE users SET bio_bonus_revoked = 1 WHERE id = ?", (user_id,))
                        conn.commit()

                        try:
                            await bot.send_message(
                                user_id,
                                "‚ö†Ô∏è –í—ã —É–±—Ä–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –±–∏–æ.\n\n"
                                "3 ‚≠ê –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n"
                                "–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –æ–±—Ä–∞—Ç–Ω–æ, –∏ –≤—ã —Å–Ω–æ–≤–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å üéÅ"
                            )
                        except Exception as e:
                            print(f"[auto_check_bio_links] –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

            print(f"[‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ BIO –∑–∞–≤–µ—Ä—à–µ–Ω–∞] {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.")
        except Exception as e:
            print(f"[‚õîÔ∏è –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏]: {e}")

        await asyncio.sleep(1000)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç




@router.message(lambda m: m.contact is not None)
async def handle_contact(message: types.Message):
    user = message.from_user
    user_id = user.id
    username = user.username
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    phone = normalize_phone(message.contact.phone_number)

    if any(phone.startswith(code) for code in ALLOWED_COUNTRY_CODES):
        set_user_verified(user_id)

        await message.answer(
            "‚úÖ –í–∞—à —Ä–µ–≥–∏–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=ReplyKeyboardRemove()
        )

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Flyer API
        data = await flyer_check_subscription(user_id, message)

        if data.get("skip"): 
            # ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            photo = FSInputFile("profile.png")  # —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            msg = (
                f"üìãüë• <i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!</i>\n\n"
                f"<blockquote>–ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ = —á–µ—Å—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã üíé\n‚õîÔ∏è –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</blockquote>"
            )

            await message.answer_photo(
                photo=photo,
                caption=msg,
                parse_mode="HTML",
                reply_markup=main_menu_kb
            )

            # üü¢ –õ–û–ì–ò–ö–ê –ë–û–ù–£–°–ê (–¢–û–õ–¨–ö–û –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –ü–û–î–ü–ò–°–ö–ò)
            user_db = get_user(user_id) 
            referrer_id = user_db.get("referrer_id")
            bonus_already_given = user_db.get("referral_bonus_given")

            # –ù–∞—á–∏—Å–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä –ò –±–æ–Ω—É—Å –ï–©–ï –ù–ï –≤—ã–¥–∞–Ω
            if referrer_id and not bonus_already_given: 
                # 1. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥
                update_stars(referrer_id, 5, reason="referral_bonus")

                # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞
                set_referral_bonus_given(user_id) 

                # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                username_for_message = f"@{username}" if username else full_name
                try:
                    await message.bot.send_message(
                        referrer_id,
                        f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_for_message} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +5 ‚≠êÔ∏è"
                    )
                except Exception as e:
                    print(f"[handle_contact] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {referrer_id}: {e}")

            return # ‚ùó –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π

        else:
            # ‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç ‚Üí –¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
                ]
            )
            await message.answer(
                data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
                reply_markup=kb
            )
            return


    else:
        await message.answer(
            "‚õîÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à –±–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.",
            reply_markup=create_contact_keyboard()
        )




@router.callback_query(F.data == "check_channels")
async def check_channels_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    bot = callback.bot

    user_info = referrals.get(user_id)
    if not user_info or "temp_user" not in user_info:
        await callback.answer("‚õîÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", show_alert=True)
        return

    temp_data = user_info["temp_user"]
    referrer_id = user_info.get("referrer_id")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_user(
        user_id,
        temp_data["username"],
        temp_data["phone"],
        referrer_id,
        temp_data["full_name"]
    )
    referrals.pop(user_id)  # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    await callback.message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    photo = FSInputFile("profile.png")  # —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    msg = (
        f"üìãüë• <i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!</i>\n\n"
        f"<blockquote>–ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ = —á–µ—Å—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã üíé\n‚õîÔ∏è –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</blockquote>"
        )

    await callback.message.answer_photo(
        photo=photo,
        caption=msg,
        parse_mode="HTML",
        reply_markup=main_menu_kb
    )

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É
    if referrer_id:
        try:
            update_stars(referrer_id, 5, reason="referral_bonus")
            await bot.send_message(
                referrer_id,
                f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{temp_data['username']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +5 ‚≠êÔ∏è"
            )
            print(f"[check_channels_cb] –ë–æ–Ω—É—Å +5 ‚≠êÔ∏è –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—É {referrer_id}")
        except Exception as e:
            print(f"[check_channels_cb] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {referrer_id}: {e}")

# ----------------- profile -----------------
def get_user_info(user: dict):
    return {
        "user_id": user["id"],
        "username": user.get("username"),
        "phone": user.get("phone"),
        "stars": user.get("stars") or 0,
        "referrer_id": user.get("referrer_id"),
        "created_at": user.get("created_at"),
        "last_bonus_date": user.get("last_bonus_date"),
        "tasks_done": user.get("tasks_done") or 0,
        "full_name": user.get("full_name")
    }

@router.message(Command("setvip"))
async def cmd_setvip(message: types.Message):
    if message.from_user.id not in ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setvip <user_id> <level>\n–ü—Ä–∏–º–µ—Ä: /setvip 123456789 2\n–î–ª—è —Å–Ω—è—Ç–∏—è VIP: /setvip 123456789 0")
        return

    try:
        uid = int(parts[1])
        level = int(parts[2])
        set_vip(uid, level)

        if level == 0:
            vip_text = "—Å–Ω—è—Ç–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
        elif level == 1:
            vip_text = "I —Å—Ç–µ–ø–µ–Ω–∏"
        elif level == 2:
            vip_text = "II —Å—Ç–µ–ø–µ–Ω–∏"
        elif level == 3:
            vip_text = "III —Å—Ç–µ–ø–µ–Ω–∏"
        else:
            vip_text = f"{level}-–≥–æ —É—Ä–æ–≤–Ω—è"

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ VIP {vip_text}")

        try:
            if level == 0:
                await message.bot.send_message(uid, "‚ö†Ô∏è –í–∞—à–∞ VIP-–ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                await message.bot.send_message(uid, f"üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è VIP-–ø–æ–¥–ø–∏—Å–∫–∞: <b>{vip_text}</b>!", parse_mode="HTML")
        except:
            pass

    except Exception as e:
        await message.answer(f"‚õîÔ∏è –û—à–∏–±–∫–∞: {e}")


@router.message(F.text == "üì± –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user = get_user(message.from_user.id)
    user_id = message.from_user.id
    rewarded_referrals_count = get_referrals_count(user_id) 
    data = await flyer_check_subscription(user_id, message)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
        ]
    )
    if not data.get("skip"):
        await message.answer(
            await message.answer(data.get("info", " –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"), reply_markup=kb)
        )
        return
    if not user:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        return

    info = get_user_info(user)
    bot_username = "starsflowxbot"
    referral_link = f"https://t.me/{bot_username}?start={info['user_id']}"
    name_to_show = info['full_name'] or (f"@{info['username']}" if info['username'] else "–ë–µ–∑ –∏–º–µ–Ω–∏")
    vip = get_vip_level(user_id)
    if vip == 1:
        vip_text = "I-—Å—Ç–µ–ø–µ–Ω–∏"
    elif vip == 2:
        vip_text = "II-—Å—Ç–µ–ø–µ–Ω–∏"
    elif vip == 3:
        vip_text = "III-—Å—Ç–µ–ø–µ–Ω–∏"
    else:
        vip_text = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    total_invites = get_conn().cursor().execute(
    "SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,)
    ).fetchone()[0]
    photo = FSInputFile("profile.png")
    msg = (
        f"<b>‚ú®–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
        f"<b>üë§ –ò–º—è: {name_to_show}</b>\n"
        f"<b>üÜî ID: {info['user_id']}</b>\n"
        f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: {info['stars']:.2f} ‚≠êÔ∏è\n"
        f"üìå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –≤–∞–º–∏: {rewarded_referrals_count}\n"
        f"üíé –í–∞—à–∞ VIP-–ø–æ–¥–ø–∏—Å–∫–∞: {vip_text}\n\n"
        f"üîó<b> –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>"
    )
    kb = get_profile_kb(user_id)
    await message.answer_photo(
    photo=photo,
    caption=msg,
    parse_mode="HTML",
    reply_markup=kb
    )

@router.callback_query(F.data == "ref_link")
async def ref_links(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)

    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏
    data = await flyer_check_subscription(user_id, callback.message)
    if not data.get("skip"):
        # ‚ùå –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        try:
            await callback.message.answer(
                data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
                reply_markup=kb
            )
        except:
            pass
        await callback.answer()
        return

    # üîπ –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if not user:
        await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        await callback.answer()
        return
    info = get_user_info(user)
    bot_username = "starsflowxbot"
    referral_link = f"https://t.me/{bot_username}?start={info['user_id']}"
    name_to_show = info['full_name'] or (f"@{info['username']}" if info['username'] else "–ë–µ–∑ –∏–º–µ–Ω–∏")
    rewarded_referrals_count = get_referrals_count(user_id) 

    total_invites = get_conn().cursor().execute(
        "SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,)
    ).fetchone()[0]

    msg = (
        f"<b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +5 ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!</b>\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{referral_link}</code>\n\n"
        f"<b>üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ—ë –≤–æ –≤—Å–µ —á–∞—Ç—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ó–≤—ë–∑–¥—ã!</b>\n\n"
        f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –≤–∞–º–∏: {rewarded_referrals_count} </b>"
    )

    # ‚úÖ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    photo = FSInputFile("referral.png")  # —Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    await callback.message.answer_photo(
        photo=photo,
        caption=msg,
        parse_mode="HTML",
        reply_markup=backs_menu
    )
    await callback.answer()




@router.callback_query(F.data == "profile")
async def profile_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)

    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await flyer_check_subscription(user_id, callback.message)
    if not data.get("skip"):
        # ‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        try:
            await callback.message.answer(
                data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
                reply_markup=kb
            )
        except:
            pass
        await callback.answer()
        return

    # üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not user:
        await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        await callback.answer()
        return

    # ‚úÖ –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    info = get_user_info(user)
    bot_username = "starsflowxbot"
    referral_link = f"https://t.me/{bot_username}?start={info['user_id']}"
    name_to_show = info['full_name'] or (f"@{info['username']}" if info['username'] else "–ë–µ–∑ –∏–º–µ–Ω–∏")
    rewarded_referrals_count = get_referrals_count(user_id) 

    total_invites = get_conn().cursor().execute(
        "SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,)
    ).fetchone()[0]
    vip = get_vip_level(user_id)
    if vip == 1:
        vip_text = "I-—Å—Ç–µ–ø–µ–Ω–∏"
    elif vip == 2:
        vip_text = "II-—Å—Ç–µ–ø–µ–Ω–∏"
    elif vip == 3:
        vip_text = "III-—Å—Ç–µ–ø–µ–Ω–∏"
    else:
        vip_text = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    photo = FSInputFile("profile.png")
    msg = (
        f"<b>‚ú®–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
        f"<b>üë§ –ò–º—è: {name_to_show}</b>\n"
        f"<b>üÜî ID: {info['user_id']}</b>\n"
        f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: {info['stars']:.2f} ‚≠êÔ∏è\n"
        f"üìå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –≤–∞–º–∏: {rewarded_referrals_count}\n"
        f"üíé –í–∞—à–∞ VIP-–ø–æ–¥–ø–∏—Å–∫–∞: {vip_text}\n\n"
        f"üîó<b> –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>"
    )
    kb = get_profile_kb(user_id)
    await callback.message.answer_photo(
    photo=photo,
    caption=msg,
    parse_mode="HTML",
    reply_markup=kb
    )



# ----------------- Bonus -----------------
def get_time_until_next_bonus():
    now = datetime.now()
    tomorrow = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
    delta = tomorrow - now
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    return f"{hours} —á {minutes} –º–∏–Ω"


@router.callback_query(F.data == "daily_bonus")
async def daily_bonus_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    await callback.answer()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not user:
        await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await flyer_check_subscription(user_id, callback.message)
    if not data.get("skip"):
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        await callback.message.answer(
            data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
            reply_markup=kb
        )
        return

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'user' –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ 'info = get_user_info(user)'
    today = datetime.now().date().isoformat()
    
    if user.get('last_bonus_date') == today:
        left = get_time_until_next_bonus()
        
        # üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_msg = await callback.message.answer(
            f"‚ùóÔ∏è –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è.\n‚åõ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞: {left}"
        )

        # ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(30)
        try:
            await new_msg.delete()
        except Exception:
            pass

        return

    # 4. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º user['id'] –≤–º–µ—Å—Ç–æ info['user_id']
    update_bonus_date(user['id'], today)
    update_stars(user['id'], 0.6, reason="daily_bonus")
    
    # üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_msg = await callback.message.answer("üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –¥–Ω—è +0.6 ‚≠êÔ∏è")
         
    # ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(30)
    try:
        await new_msg.delete()
    except Exception:
        pass



@router.callback_query(F.data == "withdraw")
async def withdraw_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–†–û–í–ï–†–ö–ò –†–ï–§–ï–†–ê–õ–û–í ---
    REQUIRED_REFERRALS = 2
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ asyncio.to_thread
    verified_referrals_count = await asyncio.to_thread(get_verified_referrals_count, user_id)

    if verified_referrals_count < REQUIRED_REFERRALS:
        # –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–≤–æ–¥.
        missing_count = REQUIRED_REFERRALS - verified_referrals_count
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        text = (
            f"<b>‚ùå –í—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!</b>\n\n"
            f"–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å <b>{REQUIRED_REFERRALS} –¥—Ä—É–∑–µ–π</b>, "
            f"–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥—É—Ç <u>–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é</u>(–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤).\n\n"
            f"–ö–∞–Ω–∞–ª —Å –≤—ã–≤–æ–¥–∞–º–∏ - [https://t.me/FreeStarsXQPay]\n"
            f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{verified_referrals_count}/{REQUIRED_REFERRALS}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å: <b>{missing_count}</b>"
        )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Åc—ã–ª–∫–∞ üìä", callback_data="ref_link")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ])

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –ü—Ä–æ—Ñ–∏–ª—å), –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.edit_caption(
                caption=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception:
            await callback.message.answer(
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        await callback.answer(f"‚ùå –ù—É–∂–Ω–æ –µ—â–µ {missing_count} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.", show_alert=True)
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–†–û–í–ï–†–ö–ò –†–ï–§–ï–†–ê–õ–û–í ---

    # --- –°–¢–ê–†–¢ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –õ–û–ì–ò–ö–ò –í–´–í–û–î–ê (–µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ) ---
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ asyncio.to_thread
    user = await asyncio.to_thread(get_user, user_id) 
    stars = user.get("stars", 0)
    
    withdraw_text = (
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{stars:.2f} ‚≠ê</b>\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    )
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    # NOTE: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    WITHDRAW_OPTIONS = [50, 75, 100, 200] 
    
    withdraw_kb = InlineKeyboardBuilder()
    for amount in WITHDRAW_OPTIONS:
        withdraw_kb.button(text=f"{amount} ‚≠ê", callback_data=f"withdraw_amount_{amount}")
        
    withdraw_kb.adjust(2)
    withdraw_kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))

    try:
        await callback.message.edit_caption(
            caption=withdraw_text,
            parse_mode="HTML",
            reply_markup=withdraw_kb.as_markup()
        )
    except Exception:
        await callback.message.answer(
            text=withdraw_text,
            parse_mode="HTML",
            reply_markup=withdraw_kb.as_markup()
        )
    
    await callback.answer()
    
# –í—ã–±–æ—Ä —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
@router.callback_query(F.data.startswith("withdraw_amount_"))
async def withdraw_amount_choice(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ asyncio.to_thread
    user = await asyncio.to_thread(get_user, user_id)

    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await flyer_check_subscription(user_id, callback.message)
    if not data.get("skip"):
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        await callback.message.answer(
            data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
            reply_markup=kb
        )
        await callback.answer()
        return
    

        # --- 2. –ü–†–û–í–ï–†–ö–ê SUBGRAM ---
    data_subgram = await subgram_check_wrapper(user=callback.from_user, message=callback.message, action="subscribe")
    if not data_subgram.get("skip"):
        # –ï—Å–ª–∏ subgram_check_wrapper –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –æ–Ω –æ–±—ã—á–Ω–æ —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
        return

    if not user:
        await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        await callback.answer()
        return

    try:
        amount = float(callback.data.split("_")[-1])
    except:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        return

    current_stars = float(user['stars'])
    if amount > current_stars:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠êÔ∏è. –ù–∞ –±–∞–ª–∞–Ω—Å–µ: {current_stars}", show_alert=True)
        return

    # —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ asyncio.to_thread
    req_id = await asyncio.to_thread(create_withdraw_request, user_id, amount)
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ asyncio.to_thread
    await asyncio.to_thread(update_stars, user_id, -amount)
    
    await callback.message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{req_id} –Ω–∞ –≤—ã–≤–æ–¥ {amount} ‚≠êÔ∏è —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 24-—Ö —á–∞—Å–æ–≤")
    await callback.answer()


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
def task_kb(task_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"complete_task_{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")]
    ])

def dds(task_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")]
    ])

# ----------------- Statistics -----------------
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_menu(message: types.Message):
    user_id = message.from_user.id

    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await flyer_check_subscription(user_id, message)
    if not data.get("skip"):
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        await message.answer(
            data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
            reply_markup=kb
        )
        return

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT SUM(stars) as total_stars FROM users")
        total_stars = cur.fetchone()["total_stars"] or 0
        total_starx = total_stars + 3001

    photo = FSInputFile("tops.png")  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª
    msg = (
        f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
        f"–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: 121100 ‚≠êÔ∏è\n"
        f"–í—Å–µ–≥–æ –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: {total_starx:.2f} ‚≠êÔ∏è"
    )

    await message.answer_photo(
        photo=photo,
        caption=msg,
        parse_mode="HTML",
        reply_markup=statistics_menu_kb
    )

@router.callback_query(F.data == "statistics")
async def statistics_cb(callback: types.CallbackQuery):
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    user_id = callback.from_user.id
    data = await flyer_check_subscription(user_id, callback.message)
    if not data.get("skip"):
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        await callback.message.answer(
            data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
            reply_markup=kb
        )
        await callback.answer()
        return

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT SUM(stars) as total_stars FROM users")
        total_stars = cur.fetchone()["total_stars"] or 0
        total_starx = total_stars + 3001

    photo = FSInputFile("tops.png")  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª
    msg = (
        f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
        f"–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: 121100 ‚≠êÔ∏è\n"
        f"–í—Å–µ–≥–æ –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: {total_starx:.2f} ‚≠êÔ∏è"
    )

    await callback.message.answer_photo(
        photo=photo,
        caption=msg,
        parse_mode="HTML",
        reply_markup=statistics_menu_kb
    )

@router.callback_query(F.data.startswith("stat_"))
async def statistics_type_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    check = await flyer_check_subscription(user_id, callback.message)

    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not check.get("skip"):
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        try:
            await callback.message.answer(
                check.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
                reply_markup=kb
            )
        except:
            pass
        await callback.answer()
        return

    # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    data = callback.data
    if data == "stat_today":
        top = get_top_users_by_stars(today_only=True)
        title = "‚≠êÔ∏è –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–≤—ë–∑–¥–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    elif data == "stat_all":
        top = get_top_users_by_stars(today_only=False)
        title = "üåü –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–≤—ë–∑–¥–∞–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    elif data == "stat_tasks":
        top = get_top_users_by_tasks()
        title = "üéØ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–∏—è–º"
    else:
        await callback.answer()
        return

    # üîπ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–µ—Ä–≤—ã—Ö
    top = top[:5]

    # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if not top:
        text = f"<b>{title}</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        medals = ["ü•á", "ü•à", "ü•â"]
        lines = []
        for i, u in enumerate(top):
            emoji = medals[i] if i < 3 else f"{i+1}."
            if data == "stat_tasks":
                lines.append(f"{emoji} <b>{u[0]}</b> ‚Äî {u[1]}")
            else:
                lines.append(f"{emoji} <b>{u[0]}</b> ‚Äî {u[1]} ‚≠êÔ∏è")
        text = f"<b>{title}</b>\n\n" + "\n".join(lines)

    # üîπ –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ (—Ñ–æ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    photo = FSInputFile("tops.png")

    # üîπ –ü—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ñ–æ—Ç–æ
    try:
        await callback.message.edit_caption(
            caption=text,
            parse_mode="HTML",
            reply_markup=statistics_back_kb
        )
    except Exception:
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        try:
            await callback.message.edit_text(
                text=text,
                parse_mode="HTML",
                reply_markup=statistics_back_kb
            )
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer_photo(
                photo=photo,
                caption=text,
                parse_mode="HTML",
                reply_markup=statistics_back_kb
            )

    await callback.answer()


# ----------------- Back to menu -----------------
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = await flyer_check_subscription(user_id, callback.message)

    if not data.get("skip"):
        # ‚ùå –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        try:
            await callback.message.answer(
                data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
                reply_markup=kb
            )
        except:
            pass
    else:
        # ‚úÖ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await callback.message.delete()
        except:
            pass
        photo = FSInputFile("profile.png")  # —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        msg = (
            f"üìãüë• <i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!</i>\n\n"
            f"<blockquote>–ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ = —á–µ—Å—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã üíé\n‚õîÔ∏è –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</blockquote>"
        )

        await callback.message.answer_photo(
            photo=photo,
            caption=msg,
            parse_mode="HTML",
            reply_markup=main_menu_kb
        )

    # üîπ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback (–æ–¥–∏–Ω —Ä–∞–∑!)
    await callback.answer()

@router.callback_query(F.data == "VIP_pod")
async def VIP_POD(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = await flyer_check_subscription(user_id, callback.message)

    if not data.get("skip"):
        # ‚ùå –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        try:
            await callback.message.answer(
                data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
                reply_markup=kb
            )
        except:
            pass
    else:
        # ‚úÖ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å ‚Üí —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º VIP –º–µ–Ω—é
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            f"üíé <b>VIP-–ü–æ–¥–ø–∏—Å–∫–∏: III-—Å—Ç–µ–ø–µ–Ω–∏ </b>üíé\n"
            f"–¢—Ä–∏ —É—Ä–æ–≤–Ω—è VIP-–ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n\n"  
            f"‚ñ´Ô∏è <b>I-—Å—Ç–µ–ø–µ–Ω—å</b> [50 ‚≠êÔ∏è] ‚Äî –≠–∫—Å–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É—Ä–æ–≤–Ω—è I (–º–µ–Ω—å—à–µ –Ω–∞–≥—Ä–∞–¥—ã), –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä—É—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö, –∫–µ—à–±–µ–∫ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö 10 ‚≠êÔ∏è\n" 
            f"‚ñ´Ô∏è <b>II-—Å—Ç–µ–ø–µ–Ω—å</b> [100 ‚≠êÔ∏è] ‚Äî –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ I-—É—Ä–æ–≤–Ω—è, –ù–∞–≥—Ä–∞–¥–∞ –≤ –∫–ª–∏–∫–µ—Ä–µ 0.2 ‚≠êÔ∏è, –≠–∫—Å–ª—é–∑–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã —É—Ä–æ–≤–Ω—è II (–±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥—ã), –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏—è—Ö, –∫–µ—à–±–µ–∫ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö 20 ‚≠êÔ∏è, —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é (10% –¥–æ—Ö–æ–¥–∞ –±–æ—Ç–∞)\n"
            f"‚ñ´Ô∏è <b>III-—Å—Ç–µ–ø–µ–Ω—å</b> [250 ‚≠êÔ∏è] ‚Äî –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ I –∏ II —É—Ä–æ–≤–Ω—è, –ù–∞–≥—Ä–∞–¥–∞ –≤ –∫–ª–∏–∫–µ—Ä–µ 0.4 ‚≠êÔ∏è, –≠–∫—Å–ª—é–∑–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã —É—Ä–æ–≤–Ω—è III (–æ–≥—Ä–æ–º–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã) + –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã, –∫–µ—à–±–µ–∫ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö 50 ‚≠êÔ∏è, —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –¥–æ—Ö–æ–¥–∞ –±–æ—Ç–∞ 30%\n",
            reply_markup=vip_help_kb,
            parse_mode="HTML"
        )

    # üîπ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await callback.answer()


# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ WITHDRAW_OPTIONS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–¥–µ-—Ç–æ –≤—ã—à–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
# WITHDRAW_OPTIONS = [50, 75, 100, 200] 

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞—Ä–æ–ª—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ----------
@router.message(lambda m: m.text and m.from_user.id not in admin_task_limit_editing)
async def handle_text_messages(message: types.Message):
    user_id = message.from_user.id
    admin_id = message.from_user.id
    text = (message.text or "").strip()

    # ----------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º (—Ä–∞–Ω–Ω—è—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∫–∞) -----------------
# ----------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º -----------------
    if user_id in admin_manual_task_creation:
        step = admin_manual_task_creation[user_id].get("step", 1)

        # –®–∞–≥ 1: –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if step == 1:
            admin_manual_task_creation[user_id]["title"] = text
            admin_manual_task_creation[user_id]["step"] = 2
            await message.answer("üõ† –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å):")
            return

    # –®–∞–≥ 2: –æ–ø–∏—Å–∞–Ω–∏–µ
        if step == 2:
            admin_manual_task_creation[user_id]["description"] = text
            admin_manual_task_creation[user_id]["step"] = 3
            await message.answer("üõ† –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å). –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏:")
            return

    # –®–∞–≥ 3: —Å—Å—ã–ª–∫–∞
        if step == 3:
            admin_manual_task_creation[user_id]["link"] = text
            admin_manual_task_creation[user_id]["step"] = 4
            await message.answer("üõ† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É (‚≠êÔ∏è) –∑–∞ —Ä—É—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2.5):")
            return

    # –®–∞–≥ 4: –Ω–∞–≥—Ä–∞–¥–∞
        if step == 4:
            try:
                stars = float(text)
                admin_manual_task_creation[user_id]["stars"] = stars
                admin_manual_task_creation[user_id]["step"] = 5
                await message.answer("üõ† –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):")
            except ValueError:
                await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2.5):")
            return

    # –®–∞–≥ 5: –ª–∏–º–∏—Ç
        if step == 5:
            try:
                max_sub = int(text)
                if max_sub < 0:
                    raise ValueError()
            except Exception:
                await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):")
                return

            st = admin_manual_task_creation[user_id]
            from database import add_manual_task_with_limit
            tid = add_manual_task_with_limit(
                st.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                st.get("description", ""),
                st.get("link", ""),
                float(st.get("stars", 0)),
                max_sub
            )
            admin_manual_task_creation.pop(user_id, None)
            await message.answer(
                f"‚úÖ –†—É—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: #{tid} ‚Äî {st.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî {st.get('stars')} ‚≠êÔ∏è (–ª–∏–º–∏—Ç: {max_sub})",
                reply_markup=admin_main_kb
            )
            return


    # ----------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ -----------------
    if user_id in admin_adding_channel:
        if not text.startswith("@"):
            await message.answer("‚õîÔ∏è –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
            return
        if text in REQUIRED_CHANNELS:
            await message.answer("‚õîÔ∏è –ö–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
            return

        REQUIRED_CHANNELS.append(text)
        admin_adding_channel.pop(user_id)
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    # ----------------- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º -----------------
# ----------------- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º -----------------
    state_coupon = referrals.get(user_id)
    if isinstance(state_coupon, dict) and state_coupon.get("await_coupon"):
# –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –∫—É–ø–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        referrals.pop(user_id, None)
        code = text.strip()  
        with get_conn() as conn:
            cur = conn.cursor()
            cur.execute("SELECT id, stars, max_uses, used_count FROM coupons WHERE code = ?", (code,))
            coupon = cur.fetchone()

            kb_main_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±—ã–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="activate_coupon")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            if not coupon:
                await message.answer("‚õîÔ∏è –ö—É–ø–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π.",reply_markup=kb_main_menu)
                return

            if coupon["used_count"] >= coupon["max_uses"]:
                await message.answer("‚õîÔ∏è –ö—É–ø–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π.",reply_markup=kb_main_menu)
                return
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–æ–Ω —Ä–∞–Ω—å—à–µ
            cur.execute("SELECT 1 FROM coupon_uses WHERE user_id = ? AND coupon_id = ?", (user_id, coupon["id"]))
            if cur.fetchone():
                await message.answer("‚õîÔ∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫—É–ø–æ–Ω.")
                return

        # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã
            cur.execute("UPDATE users SET stars = stars + ? WHERE id = ?", (coupon["stars"], user_id))
            cur.execute("UPDATE coupons SET used_count = used_count + 1 WHERE id = ?", (coupon["id"],))
            cur.execute("INSERT INTO coupon_uses (user_id, coupon_id) VALUES (?, ?)", (user_id, coupon["id"]))
            conn.commit()

        await message.answer(f"‚úÖ –ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {coupon['stars']} ‚≠êÔ∏è",reply_markup=kb_main_menu)
        return


    # ----------------- –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –∞–¥–º–∏–Ω–æ–º -----------------
    if user_id in admin_coupon_creation:
        step = admin_coupon_creation[user_id].get("step")

        if step == 1:
            # –í–≤–æ–¥ –Ω–∞–≥—Ä–∞–¥—ã
            try:
                stars = float(text)
            except ValueError:
                await message.answer("‚õîÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã:")
                return

            admin_coupon_creation[user_id]["stars"] = stars
            admin_coupon_creation[user_id]["step"] = 2
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∫—É–ø–æ–Ω–∞:")
            return

        if step == 2:
            # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
            try:
                uses = int(text)
            except ValueError:
                await message.answer("‚õîÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:")
                return

            stars = admin_coupon_creation[user_id]["stars"]
            code = generate_coupon_code()

            with get_conn() as conn:
                cur = conn.cursor()
                cur.execute(
                    "INSERT INTO coupons (code, stars, max_uses, used_count) VALUES (?, ?, ?, 0)",
                    (code, stars, uses)
                )
                conn.commit()

            await message.answer(
                f"–ö—É–ø–æ–Ω: `{code}`\n"
                f"–ù–∞–≥—Ä–∞–¥–∞: {stars} ‚≠êÔ∏è\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {uses}",
                parse_mode="Markdown"
            )
            print(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫—É–ø–æ–Ω: {code}, –Ω–∞–≥—Ä–∞–¥–∞: {stars} ‚≠êÔ∏è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {uses}")
            del admin_coupon_creation[user_id]
            return


    # ----------------- –í–≤–æ–¥ –∞–¥–º–∏–Ω-–ø–∞—Ä–æ–ª—è -----------------
    if user_id in admin_auth_waiting:
        reset_user_states(user_id)    
        if text == ADMIN_PASSWORD:
            admin_auth_waiting.discard(user_id)
            admin_sessions.add(user_id)
            await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_kb)
        else:
            admin_auth_waiting.discard(user_id)
            await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    # ----------------- –†–∞—Å—Å—ã–ª–∫–∞ -----------------
    state = referrals.get(user_id)
    if isinstance(state, dict) and state.get("await_broadcast"):
        def get_username(uid: int) -> str | None:
            with get_conn() as conn:
                cur = conn.cursor()
                cur.execute("SELECT username FROM users WHERE id = ?", (uid,))
                row = cur.fetchone()
            if row:
                return row["username"]  # –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω row_factory = sqlite3.Row
            return None

        if not text:
            await message.answer("‚õîÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            print(f"{get_username(user_id)} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—ã—Å—Å—ã–ª–∫—É..")
            return

        await message.answer("‚ö°Ô∏è –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è ‚ö°Ô∏è")
        print(f"{get_username(user_id)} –∑–∞–ø—É—Å—Ç–∏–ª —Ä—ã—Å—Å—ã–ª–∫—É: {text}")
        with get_conn() as conn:
            cur = conn.cursor()
            cur.execute("SELECT id FROM users")
            users = [row[0] for row in cur.fetchall()]

        sent_count = 0
        for uid in users:
            try:
                await message.bot.send_message(uid, text)
                sent_count += 1
                await asyncio.sleep(0.05)
            except:
                continue

        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        referrals.pop(user_id, None)
        return


    admin_id = message.from_user.id
    if admin_id not in admin_task_creation:
        return  # —ç—Ç–æ –Ω–µ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è

    state = admin_task_creation[admin_id]

    if state["step"] == 1:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
        channel = message.text.strip()
        state["channel"] = channel
        state["step"] = 2
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (‚≠êÔ∏è):")
        return

    if state["step"] == 2:
        try:
            stars = float(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã:")
            return

        state["stars"] = stars
        state["step"] = 3
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):")
        return

    if state["step"] == 3:
        try:
            max_completions = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞:")
            return

        state["max_completions"] = max_completions

        with get_conn() as conn:
            cur = conn.cursor()
            cur.execute(
                "INSERT INTO tasks (channel, stars, max_completions, current_completions) VALUES (?, ?, ?, 0)",
                (state["channel"], state["stars"], state["max_completions"])
            )

            conn.commit()

        await message.answer(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n{state['channel']} ‚Äî {state['stars']} ‚≠êÔ∏è (–ª–∏–º–∏—Ç: {state['max_completions'] or '‚àû'})",
            reply_markup=admin_main_kb
        )
        del admin_task_creation[admin_id]

    # ----------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞–¥–∞–Ω–∏—è -----------------
    if user_id in admin_task_editing:
        try:
            new_stars = float(text)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã.")
            return

        task_id = admin_task_editing[user_id]["task_id"]
        with get_conn() as conn:
            cur = conn.cursor()
            cur.execute("UPDATE tasks SET stars = ? WHERE id = ?", (new_stars, task_id))
            conn.commit()

        await update_admin_tasks_list(message)  # –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        admin_task_editing.pop(user_id)
        return

# ----------------- Admin panel callbacks -----------------
@router.callback_query(F.data == "admin_panel")
async def admin_panel_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    referrals.pop(user_id, None)  # —É–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞

    if user_id in admin_sessions:
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if callback.message.text:
            await callback.message.edit_text("‚úÖ –í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=admin_main_kb)
        else:
            # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer("‚úÖ –í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=admin_main_kb)
        await callback.answer()
        return

    admin_auth_waiting.add(user_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=backs_menu)
    await callback.answer()

# ----------------- Admin: —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ -----------------
@router.callback_query(F.data == "admin_requests")
async def admin_requests_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    requests = get_withdraw_requests(status="pending")
    if not requests:
        await callback.message.edit_text("üìã –ó–∞—è–≤–æ–∫ –Ω–µ—Ç.", reply_markup=admin_main_kb)
        await callback.answer()
        return

    text_lines = ["üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (pending):"]
    kb = InlineKeyboardBuilder()

    for r in requests:
        # –ï—Å–ª–∏ get_withdraw_requests –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂
        req_id = r[0]
        uid = r[1]
        username = r[2] or f"User {uid}"
        stars = r[3]
        created_at = r[5]  # —É—Ç–æ—á–Ω–∏ –∏–Ω–¥–µ–∫—Å –ø–æ —Å–≤–æ–µ–π –ë–î
        text_lines.append(f"#{req_id} ‚Äî @{username} ‚Äî {stars} ‚≠êÔ∏è ‚Äî {created_at}")
        kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å #{req_id}", callback_data=f"admin_view_{req_id}")

    kb.button(text="‚¨ÖÔ∏è", callback_data="back_to_menu")
    markup = kb.as_markup()
    new_text = "\n".join(text_lines)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å edit_text —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º
    if callback.message.text != new_text:
        try:
            await callback.message.edit_text(new_text, reply_markup=markup)
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise


    await callback.answer()


# ----------------- Admin: –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ -----------------
@router.callback_query(F.data.startswith("admin_view_"))
async def admin_view_request_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    try:
        req_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return

    req = get_withdraw_request_by_id(req_id)
    if not req:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ï—Å–ª–∏ req ‚Äî —Å–ª–æ–≤–∞—Ä—å, –≤—Å—ë –æ–∫
    uid = req['user_id']
    username = req['username'] or f"User {uid}"
    stars = req['stars']
    status = req['status']
    created_at = req['created_at']

    text = (
        f"–ó–∞—è–≤–∫–∞ #{req_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID {uid})\n"
        f"–°—É–º–º–∞: {stars} ‚≠êÔ∏è\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {created_at}"
    )

    await callback.message.edit_text(text, reply_markup=admin_request_actions_kb(req_id))
    await callback.answer()


# ----------------- Admin: –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É -----------------
@router.callback_query(F.data.startswith("req_") & F.data.endswith("_approve"))
async def admin_approve_cb(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if user_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    try:
        req_id = int(callback.data.split("_")[1])
    except:
        await callback.answer()
        return

    req = get_withdraw_request_by_id(req_id)
    if not req or req['status'] != "pending":
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    update_withdraw_request(req_id, "approved")
    uid = req['user_id']
    stars = req['stars']

    try:
        await bot.send_message(uid, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {stars} ‚≠êÔ∏è –æ–¥–æ–±—Ä–µ–Ω–∞.")
        print(f"–ó–∞—è–≤–∫–∞ {user_id} –Ω–∞ –≤—ã–ø–ª–∞—Ç—É {stars} ‚≠êÔ∏è –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # --- –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê ---
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –æ –≤—ã–ø–ª–∞—Ç–µ
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GROUP_ID_TO_FORWARD –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä: GROUP_ID_TO_FORWARD = -100123456789GROUP_ID_TO_FORWARD
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
        username = req.get('username')
        username_to_show = f"@{username}" if username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {uid})"
        
        message_to_group = f"{username_to_show} –≤—ã–≤–µ–ª(-–∞) {stars} ‚≠êÔ∏è"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ ID –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω
        if WITHDRAW_ID_TO_FORWARD:
             await bot.send_message(WITHDRAW_ID_TO_FORWARD, message_to_group)
             print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ –¥–ª—è {username_to_show} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
             
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–ª–∞—Ç–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê ---

    await callback.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{req_id} –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=admin_main_kb)
    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")


# ----------------- Admin: –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É -----------------
@router.callback_query(F.data.startswith("req_") & F.data.endswith("_reject"))
async def admin_reject_cb(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if user_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    try:
        req_id = int(callback.data.split("_")[1])
    except:
        await callback.answer()
        return

    req = get_withdraw_request_by_id(req_id)
    if not req or req['status'] != "pending":
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    uid = req['user_id']
    stars = req['stars']
    update_stars(uid, float(stars))  # –≤–µ—Ä–Ω—É—Ç—å –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    update_withdraw_request(req_id, "rejected")

    try:
        await bot.send_message(uid, f"‚õîÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ {stars} ‚≠êÔ∏è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        print(f"–ó–∞—è–≤–∫–∞ {user_id} –Ω–∞ –≤—ã–ø–ª–∞—Ç—É {stars} ‚≠êÔ∏è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await callback.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{req_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=admin_main_kb)
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")




@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    referrals[user_id] = {"await_broadcast": True}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await callback.answer()


@router.callback_query(F.data == "admin_users_stats")
async def admin_users_stats_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ (UTC + 3 —á–∞—Å–∞)
    now = datetime.utcnow()
    # today_iso = (now + timedelta(hours=3)).strftime('%Y-%m-%d') # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ISO-—Ñ–æ—Ä–º–∞—Ç
    today_date_msk = (now + timedelta(hours=3)).date().isoformat()

    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ 
    with get_conn() as conn:
        cur = conn.cursor()
        
        # –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        cur.execute("SELECT COUNT(*) as total FROM users")
        total_users = cur.fetchone()["total"]

        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–µ—Å—è —Å–µ–≥–æ–¥–Ω—è (—Ç–µ–ø–µ—Ä—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è )
        # üí° –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é:
        today_users = get_users_today_count(today_date_msk)

        # ‚úÖ –ù–û–í–û–ï: –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        today_verified_users = get_verified_users_today_count(today_date_msk)

        # –í—Å–µ–≥–æ –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        cur.execute("SELECT SUM(stars) as total_stars FROM users")
        total_stars = cur.fetchone()["total_stars"] or 0

    msg = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ {today_date_msk}**:\n\n"
        f"üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {today_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {today_verified_users}\n" # <-- –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
        f"‚≠êÔ∏è –í—Å–µ–≥–æ –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: {total_stars:.2f}"
    )

    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
    await callback.message.answer(
        text=msg,
        parse_mode="HTML",
        reply_markup=admin_main_kb
    )
    await callback.answer()

USERS_PER_PAGE = 20

@router.callback_query(F.data.startswith("admin_users"))
async def admin_users_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    try:
        page = int(callback.data.split("_")[-1])
    except:
        page = 1

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, username, full_name FROM users ORDER BY id ASC")
        users = cur.fetchall()

    if not users:
        await callback.message.edit_text("üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=admin_main_kb)
        await callback.answer()
        return

    start = (page - 1) * USERS_PER_PAGE
    end = start + USERS_PER_PAGE
    users_page = users[start:end]

    text_lines = [f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{(len(users)-1)//USERS_PER_PAGE+1}):"]
    kb = InlineKeyboardBuilder()

    for u in users_page:
        uid = u["id"]
        username = u["username"] or f"User {uid}"
        text_lines.append(f"@{username}")
        kb.button(text=f"@{username}", callback_data=f"admin_user_{uid}")

    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_users_{page-1}"))
    if end < len(users):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"admin_users_{page+1}"))

    if nav_buttons:
        kb.row(*nav_buttons)

    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")

    await safe_edit_text(callback.message, "\n".join(text_lines), kb.as_markup())
    await callback.answer()


# Callback –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("admin_user_"))
async def admin_user_profile_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    try:
        user_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return

    user = get_user(user_id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    info = get_user_info(user)
    total_invites = get_conn().cursor().execute(
    "SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,)
    ).fetchone()[0]
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        f"ID: {info['user_id']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {info['created_at']}\n"
        f"–ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: {info['stars']} ‚≠êÔ∏è\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {info['tasks_done']} üéØ\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {total_invites} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë• "
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"admin_delete_user_{user_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data="admin_users")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
admin_task_creation = {}

@router.callback_query(lambda c: c.data.startswith("admin_delete_user_"))
async def admin_delete_user_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", show_alert=True)
        return

    try:
        user_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
        return

    delete_user(user_id)
    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏ –º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await admin_users_cb(callback)


@router.callback_query(F.data == "admin_add_task")
async def admin_add_task_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    admin_task_creation[admin_id] = {"step": 1}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä https://t.me/):")
    await callback.answer()

async def safe_edit_text(message_or_callback, text: str, reply_markup: InlineKeyboardMarkup | None = None):
    if isinstance(message_or_callback, types.CallbackQuery):
        message = message_or_callback.message
    else:
        message = message_or_callback

    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except aiogram.exceptions.TelegramBadRequest as e:
        error_text = str(e)
        if "message is not modified" in error_text:
            return
        elif "message to edit not found" in error_text or "can't be edited" in error_text:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è
            await message.answer(text, reply_markup=reply_markup)
        else:
            raise


@router.callback_query(F.data == "admin_tasks_list")
async def admin_tasks_list_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, channel, stars, max_completions, current_completions FROM tasks")
        tasks = cur.fetchall()

    if not tasks:
        await safe_edit_text(callback.message, "üéØ –ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.", admin_main_kb)
        await callback.answer()
        return

    text_lines = ["üéØ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:"]
    kb = InlineKeyboardBuilder()
    for t in tasks:
        task_id = t["id"]
        channel = t["channel"]
        stars = t["stars"]
        max_c = t["max_completions"] if t["max_completions"] not in (None, 0) else '‚àû'
        curr_c = t["current_completions"] or 0
        text_lines.append(
        f"#{t['id']} ‚Äî {t['channel']} ‚Äî {t['stars']} ‚≠êÔ∏è (–ª–∏–º–∏—Ç: {max_c or '‚àû'}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {curr_c})"
        )
        kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å #{task_id}", callback_data=f"admin_task_{task_id}")

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    await safe_edit_text(callback.message, "\n".join(text_lines), kb.as_markup())
    await callback.answer()


def admin_task_actions_kb(task_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data=f"admin_task_edit_{task_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data=f"admin_task_limit_{task_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"admin_task_delete_{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_tasks_list")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

@router.callback_query(lambda c: bool(re.match(r"^admin_task_\d+$", (c.data or ""))))
async def admin_task_view_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    try:
        task_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, channel, stars, max_completions, current_completions FROM tasks WHERE id = ?", (task_id,))
        task = cur.fetchone()

    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    max_c = task["max_completions"] if "max_completions" in task.keys() else 0
    curr_c = task["current_completions"] if "current_completions" in task.keys() else 0

    text = (
        f"üéØ –ó–∞–¥–∞–Ω–∏–µ #{task['id']}\n"
        f"–ö–∞–Ω–∞–ª: {task['channel']}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {task['stars']} ‚≠êÔ∏è\n"
        f"–õ–∏–º–∏—Ç: {max_c or '‚àû'}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {curr_c}"
    )
    await safe_edit_text(callback, text, admin_task_actions_kb(task['id']))
    await callback.answer()


admin_task_editing = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@router.callback_query(F.data.startswith("admin_task_edit_"))
async def admin_task_edit_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    try:
        task_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return

    admin_task_editing[admin_id] = {"task_id": task_id}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É (‚≠êÔ∏è) –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    await callback.answer()

@router.callback_query(F.data.startswith("admin_task_delete_"))
async def admin_task_delete_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    task_id = int(callback.data.split("_")[-1])
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
        conn.commit()

    await callback.answer("üóë –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    await update_admin_tasks_list(callback)  # <-- –ø–µ—Ä–µ–¥–∞—ë–º callback, –∞ –Ω–µ message


async def update_admin_tasks_list(message_or_callback):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, channel, stars, max_completions, current_completions FROM tasks ORDER BY id DESC")
        tasks = cur.fetchall()

    if not tasks:
        await safe_edit_text(message_or_callback, "üéØ –ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.", admin_main_kb)
        return

    text_lines = ["üéØ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:"]
    kb = InlineKeyboardBuilder()
    for t in tasks:
        task_id = t["id"]
        channel = t["channel"]
        stars = t["stars"]
        text_lines.append(f"#{task_id} ‚Äî {channel} ‚Äî {stars} ‚≠êÔ∏è (–ª–∏–º–∏—Ç: {t['max_completions'] or '‚àû'}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {t['current_completions']})")
        kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å #{task_id}", callback_data=f"admin_task_{task_id}")

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    await safe_edit_text(message_or_callback, "\n".join(text_lines), kb.as_markup())

@router.callback_query(F.data == "admin_channels")
async def admin_channels_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    text = "üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(REQUIRED_CHANNELS)

    kb = InlineKeyboardMarkup(inline_keyboard=[])  # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    for ch in REQUIRED_CHANNELS:
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚ùå {ch}", callback_data=f"remove_channel_{ch[1:]}")
        ])
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
    ])
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ])

    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "add_channel")
async def add_channel_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    admin_adding_channel[admin_id] = True
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await callback.answer()
@router.callback_query(lambda c: c.data.startswith("remove_channel_"))
async def remove_channel_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    ch = "@" + callback.data.split("_")[-1]
    if ch in REQUIRED_CHANNELS:
        REQUIRED_CHANNELS.remove(ch)
        await callback.answer(f"‚úÖ –ö–∞–Ω–∞–ª {ch} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        await admin_channels_cb(callback)



def submission_actions_kb(submission_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"submission_approve_{submission_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"submission_reject_{submission_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_task_submissions")]
    ])

@router.callback_query(F.data.startswith("admin_submission_"))
async def admin_submission_view_cb(callback: types.CallbackQuery):
    sid = int(callback.data.split("_")[-1])

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT ts.id, ts.user_id, ts.task_id, u.username, t.channel, t.stars
            FROM task_submissions ts
            JOIN users u ON ts.user_id = u.id
            LEFT JOIN tasks t ON ts.task_id = t.id
            WHERE ts.id = ?
        """, (sid,))
        s = cur.fetchone()

    if not s:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)
        return

    channel = s["channel"] if s["channel"] else "–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"
    stars = s["stars"] if s["stars"] else 0

    text = (
        f"üì• –ó–∞—è–≤–∫–∞ #{s['id']}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{s['username']}\n"
        f"üéØ –ó–∞–¥–∞–Ω–∏–µ: {channel}\n"
        f"‚≠êÔ∏è –ù–∞–≥—Ä–∞–¥–∞: {stars}"
    )
    await safe_edit_text(callback.message, text, submission_actions_kb(s['id']))
    await callback.answer()

# ----------------- –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ -----------------
@router.callback_query(F.data == "admin_task_submissions")
async def admin_task_submissions_cb(callback: types.CallbackQuery):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT ts.id, ts.user_id, ts.task_id, u.username, t.channel, t.stars
            FROM task_submissions ts
            JOIN users u ON ts.user_id = u.id
            LEFT JOIN tasks t ON ts.task_id = t.id
            WHERE ts.status = 'pending'
            ORDER BY ts.created_at ASC
        """)
        submissions = cur.fetchall()

    if not submissions:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=admin_main_kb)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    text_lines = ["üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:"]
    for s in submissions:  # –∏–ª–∏ manual_tasks, —Å–º–æ—Ç—Ä—è —á—Ç–æ —É —Ç–µ–±—è –≤ –≤—ã–±–æ—Ä–∫–µ
        stars = s['stars']
        channel = s.get('channel') or s.get('link') or "‚Äî"

        max_uses = s.get("max_uses") or 0
        current_uses = s.get("current_uses") or 0

        # –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        if max_uses > 0 and current_uses >= max_uses:
            continue

        text_lines.append(f"#{s['id']} ‚Äî @{s['username']} ‚Äî {channel} ({stars} ‚≠êÔ∏è)")
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"–û—Ç–∫—Ä—ã—Ç—å #{s['id']}", callback_data=f"admin_submission_{s['id']}")
        ])

    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    await safe_edit_text(callback.message, "\n".join(text_lines), kb)
    await callback.answer()
# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º
@router.callback_query(F.data == "tasks")
async def tasks_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await flyer_check_subscription(user_id, callback.message)

    if not data.get("skip"):
        # ‚ùå –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
            ]
        )
        await callback.message.answer(
            data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
            reply_markup=kb
        )
        await callback.answer()
        return




    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, channel, stars, max_completions, current_completions FROM tasks ORDER BY id DESC")
        tasks = cur.fetchall()

        kb_buttons = []

            # ===== –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è =====
        for task in FIXED_TASKS:
            task_id = task["id"]

                # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ —é–∑–µ—Ä
            cur.execute("""
                SELECT status FROM task_submissions
                WHERE user_id = ? AND task_id = ?
            """, (user_id, task_id))
            row = cur.fetchone()
            if row and row["status"] == "approved":
                continue

            kb_buttons.append([
                InlineKeyboardButton(
                    text=f"‚úÖ –ü–û–î–ü–ò–®–ò–°–¨ + {task['stars']} ‚≠êÔ∏è",
                    url=task["url"]
                )
            ])

            # ===== –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–∑ –±–∞–∑—ã =====
        for task in tasks:
            task_id = task["id"]
            stars = task["stars"]
            channel = task["channel"]

            max_c = task["max_completions"] or 0
            curr_c = task["current_completions"] or 0
            if max_c > 0 and curr_c >= max_c:
                continue

            cur.execute("""
                SELECT status FROM task_submissions
                WHERE user_id = ? AND task_id = ?
            """, (user_id, task_id))
            row = cur.fetchone()
            if row and row["status"] == "approved":
                continue

            url = channel if channel.startswith("http") else f"https://t.me/{channel.lstrip('@')}"

            kb_buttons.append([
                InlineKeyboardButton(
                    text=f"‚úÖ –ü–û–î–ü–ò–®–ò–°–¨ + {stars} ‚≠êÔ∏è",
                    url=url
                )
            ])

            # ===== –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç =====
        if not kb_buttons:
            kb_empty = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", url="t.me/surnamesks")],
                    [InlineKeyboardButton(text="üõ† –†—É—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="manual_tasks_list")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")]
                ]
            )
            photo = FSInputFile("tasks.png")  # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            await callback.message.answer_photo(
                photo=photo,
                caption="üéØ –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=kb_empty
            )
            await callback.answer()
            return

            # ===== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ =====
        kb_buttons.append([InlineKeyboardButton(text="üõ† –†—É—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="manual_tasks_list")])
        kb_buttons.append([InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", url="t.me/surnamesks")])
        kb_buttons.append([InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_all_tasks")])
        kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")])

        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)

        photo = FSInputFile("tasks.png")  # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
# –∏–ª–∏ photo = "https://example.com/tasks.png"  # URL

        await callback.message.answer_photo(
            photo=photo,
            caption="üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=kb
        )

    await callback.answer()





# –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É ‚Äî –∑–¥–µ—Å—å –Ω–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã
@router.callback_query(F.data.startswith("submission_approve_"))
async def submission_approve_cb(callback: types.CallbackQuery, bot: Bot):
    sid = int(callback.data.split("_")[-1])

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT user_id, task_id FROM task_submissions WHERE id = ? AND status = 'pending'", (sid,))
        s = cur.fetchone()
        if not s:
            await callback.answer("‚õîÔ∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        user_id, task_id = s["user_id"], s["task_id"]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        cur.execute("SELECT stars FROM tasks WHERE id = ?", (task_id,))
        stars = cur.fetchone()["stars"]

        # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã
        cur.execute("UPDATE users SET stars = stars + ? WHERE id = ?", (stars, user_id))
        cur.execute("UPDATE task_submissions SET status = 'approved' WHERE id = ?", (sid,))
        conn.commit()

    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{sid} –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {stars} ‚≠êÔ∏è")
    except:
        pass

    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{sid} –æ–¥–æ–±—Ä–µ–Ω–∞.", reply_markup=admin_main_kb)
    await callback.answer()


# –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É
@router.callback_query(F.data.startswith("submission_reject_"))
async def submission_reject_cb(callback: types.CallbackQuery, bot: Bot):
    sid = int(callback.data.split("_")[-1])

    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM task_submissions WHERE id = ? AND status = 'pending'", (sid,))
        s = cur.fetchone()
        if not s:
            await callback.answer("‚õîÔ∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        user_id = s["user_id"]

        cur.execute("UPDATE task_submissions SET status = 'rejected' WHERE id = ?", (sid,))
        conn.commit()

    try:
        await bot.send_message(user_id, f"‚õîÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{sid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except:
        pass

    await callback.message.edit_text(f"‚õîÔ∏è –ó–∞—è–≤–∫–∞ #{sid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=admin_main_kb)
    await callback.answer()

def generate_coupon_code(length=12):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

admin_coupon_creation = {}

@router.callback_query(F.data == "admin_add_coupon")
async def admin_add_coupon_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    admin_coupon_creation[admin_id] = {"step": 1}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚≠êÔ∏è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞:")
    await callback.answer()


@router.message(lambda m: m.from_user.id in admin_coupon_creation and admin_coupon_creation[m.from_user.id]["step"] == 1)
async def process_coupon_stars(message: types.Message):
    admin_id = message.from_user.id
    try:
        stars = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã:")
        return

    admin_coupon_creation[admin_id]["stars"] = stars
    admin_coupon_creation[admin_id]["step"] = 2
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∫—É–ø–æ–Ω–∞:")



@router.callback_query(F.data == "activate_coupon")
async def activate_coupon_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data_subgram = await subgram_check_wrapper(user=callback.from_user, message=callback.message, action="subscribe")
    if not data_subgram.get("skip"):
        referrals.pop(user_id, None)
        await callback.answer() # –°–Ω–∏–º–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∏
        return  
    referrals[user_id] = {"await_coupon": True}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É–ø–æ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", reply_markup=backs_menu)
    await callback.answer() # –°–Ω–∏–º–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∏


@router.callback_query(F.data == "admin_coupons")
async def admin_coupons_cb(callback: types.CallbackQuery):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT id, code, stars, max_uses, used_count,
                   (max_uses - used_count) as remaining_uses
            FROM coupons ORDER BY id DESC
        """)
        coupons = cur.fetchall()

    if not coupons:
        await callback.message.edit_text("üìÉ –ö—É–ø–æ–Ω–æ–≤ –Ω–µ—Ç.", reply_markup=admin_main_kb)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    text_lines = ["üìÉ –°–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤:"]

    for c in coupons:
        text_lines.append(
            f"{c['code']} ‚Äî ‚≠êÔ∏è {c['stars']} ‚Äî –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {c['remaining_uses']}"
        )
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {c['code']}", callback_data=f"remove_coupon_{c['id']}")
        ])

    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    await callback.message.edit_text("\n".join(text_lines), reply_markup=kb)

@router.callback_query(lambda c: c.data.startswith("remove_coupon_"))
async def remove_coupon_cb(callback: types.CallbackQuery):
    coupon_id = int(callback.data.split("_")[-1])
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM coupons WHERE id = ?", (coupon_id,))
        conn.commit()
    await callback.answer("‚úÖ –ö—É–ø–æ–Ω —É–¥–∞–ª—ë–Ω.")
    await admin_coupons_cb(callback)

@router.callback_query(F.data == "check_all_tasks")
async def check_all_tasks_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    approved_count = 0
    total_stars = 0

    with get_conn() as conn:
        cur = conn.cursor()

        # === –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã ===
        cur.execute("SELECT id, channel, stars, max_completions, current_completions FROM tasks ORDER BY id DESC")
        tasks = cur.fetchall()

        # === –ü—Ä–æ–≤–µ—Ä—è–µ–º FIXED_TASKS ===
        for task in FIXED_TASKS:
            task_id = task["id"]
            stars = task["stars"]
            chat_id = task["check_id"]

            cur.execute("""
                SELECT status FROM task_submissions
                WHERE user_id = ? AND task_id = ?
            """, (user_id, task_id))
            row = cur.fetchone()
            if row and row["status"] == "approved":
                continue  # —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

            try:
                member = await callback.bot.get_chat_member(chat_id, user_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FIXED_TASK {task_id}: {e}")
                continue

            if member.status in ["member", "administrator", "creator"]:
                update_stars(user_id, stars, reason=f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{task_id}", cur=cur)
                cur.execute("""
                    INSERT INTO task_submissions (user_id, task_id, status)
                    VALUES (?, ?, 'approved')
                """, (user_id, task_id))
                approved_count += 1
                total_stars += stars

        # === –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã ===
        for task in tasks:
            task_id = task["id"]
            stars = task["stars"]
            channel = task["channel"]

            max_c = task["max_completions"] or 0
            curr_c = task["current_completions"] or 0
            if max_c > 0 and curr_c >= max_c:
                continue  # –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω

            cur.execute("""
                SELECT status FROM task_submissions
                WHERE user_id = ? AND task_id = ?
            """, (user_id, task_id))
            row = cur.fetchone()
            if row and row["status"] == "approved":
                continue  # —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

            try:
                # –µ—Å–ª–∏ –≤ channel —É–∫–∞–∑–∞–Ω @username –∏–ª–∏ —Å—Å—ã–ª–∫–∞
                if channel.startswith("http"):
                    chat = await callback.bot.get_chat(channel)
                else:
                    chat = await callback.bot.get_chat(f"@{channel.lstrip('@')}")

                member = await callback.bot.get_chat_member(chat.id, user_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TASK {task_id}: {e}")
                continue

            if member.status in ["member", "administrator", "creator"]:
                update_stars(user_id, stars, reason=f"–ó–∞–¥–∞–Ω–∏–µ #{task_id}", cur=cur)
                cur.execute("""
                    INSERT INTO task_submissions (user_id, task_id, status)
                    VALUES (?, ?, 'approved')
                """, (user_id, task_id))
                approved_count += 1
                total_stars += stars

                # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
                cur.execute("""
                    UPDATE tasks
                    SET current_completions = current_completions + 1
                    WHERE id = ?
                """, (task_id,))

        conn.commit()

    # === –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
    if total_stars == 0:
        await callback.message.answer("‚õîÔ∏è –ù–æ–≤—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await callback.message.answer(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {approved_count} –∑–∞–¥–∞–Ω–∏–π\nüíé –ù–∞—á–∏—Å–ª–µ–Ω–æ: +{total_stars} ‚≠êÔ∏è")

    await callback.answer()





admin_task_limit_editing = {}

@router.callback_query(F.data.startswith("admin_task_limit_"))
async def admin_task_limit_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    task_id = int(callback.data.split("_")[-1])
    admin_task_limit_editing[admin_id] = {"task_id": task_id}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):")
    await callback.answer()


@router.message(lambda m: m.from_user.id in admin_task_limit_editing)
async def handle_limit_edit(message: types.Message):
    user_id = message.from_user.id
    task_id = admin_task_limit_editing[user_id]["task_id"]

    try:
        new_limit = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞.")
        return

    if new_limit < 0:
        await message.answer("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        return

    from database import update_task_limit
    update_task_limit(task_id, new_limit)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await update_admin_tasks_list(message)
    except Exception:
        pass

    await message.answer(f"‚úÖ –õ–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏—è #{task_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_limit or '‚àû'}")
    del admin_task_limit_editing[user_id]




# ----------------- Admin: Manual Tasks (–†—É—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è) -----------------
@router.callback_query(F.data == "admin_manual_tasks")
async def admin_manual_tasks_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return

    # <-- –ó–∞–º–µ–Ω–∏–ª–∏ get_manual_tasks –Ω–∞ get_all_manual_tasks
    from database import get_all_manual_tasks
    tasks = get_all_manual_tasks()
    if not tasks:
        kb_empty = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_add_manual_task")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await safe_edit_text(callback, "üõ† –†—É—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç.", kb_empty)
        await callback.answer()
        return

    text_lines = ["üõ† –°–ø–∏—Å–æ–∫ —Ä—É—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:"]
    kb = InlineKeyboardBuilder()

    for t in tasks:
        max_u = int(t.get("max_uses") or 0)
        curr_u = int(t.get("current_uses") or 0)

        max_text = max_u if max_u != 0 else "‚àû"
        exhausted = (max_u > 0 and curr_u >= max_u)
        status = " ‚Äî –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω" if exhausted else ""

        text_lines.append(
            f"#{t['id']} ‚Äî {t.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî {t.get('stars',0)} ‚≠êÔ∏è "
            f"(–ª–∏–º–∏—Ç: {max_text}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {curr_u}){status}"
        )
        kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å #{t['id']}", callback_data=f"admin_manual_{t['id']}")

    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_add_manual_task")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    await safe_edit_text(callback, "\n".join(text_lines), kb.as_markup())
    await callback.answer()

@router.callback_query(F.data == "admin_add_manual_task")
async def admin_add_manual_task_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return
    admin_manual_task_creation[admin_id] = {"step": 1}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    await callback.answer()

@router.callback_query(lambda c: c.data and re.match(r"^admin_manual_\d+$", c.data))
async def admin_manual_view_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return
    try:
        task_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return

    from database import get_manual_task, count_total_submissions
    task = get_manual_task(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # —Å—á–∏—Ç–∞–µ–º –ª–∏–º–∏—Ç—ã (–±–µ—Ä—ë–º –∏–∑ max_uses / current_uses)
    max_lim = int(task.get("max_uses") or 0)
    curr = int(task.get("current_uses") or 0)

    if max_lim > 0:
        left = max_lim - curr
        if left < 0:
            left = 0
        lim_text = f"–õ–∏–º–∏—Ç: {curr}/{max_lim} (–æ—Å—Ç–∞–ª–æ—Å—å: {left})"
    else:
        lim_text = "–õ–∏–º–∏—Ç: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"

    text = (
        f"üõ† –†—É—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{task['id']}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.get('title')}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{task.get('description')}\n\n"
        f"–°—Å—ã–ª–∫–∞: {task.get('link')}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {task.get('stars')} ‚≠êÔ∏è\n"
        f"{lim_text}\n\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {task.get('created_at')}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data=f"manual_limit:{task['id']}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_manual_delete_{task['id']}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manual_tasks")]
    ])
    await safe_edit_text(callback, text, kb)
    await callback.answer()

@router.callback_query(F.data.startswith("admin_manual_delete_"))
async def admin_manual_delete_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", show_alert=True)
        return

    try:
        tid = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞–Ω–∏—è.", show_alert=True)
        return

    from database import delete_manual_task
    delete_manual_task(tid)

    await callback.answer("‚úÖ –†—É—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await admin_manual_tasks_cb(callback)

@router.callback_query(F.data == "manual_tasks_list")
async def manual_tasks_list_cb(callback: types.CallbackQuery):
    await callback.answer() # –°–Ω–∏–º–∞–µ–º —á–∞—Å—ã
    
    user_id = callback.from_user.id
    # –ò–º–ø–æ—Ä—Ç—ã –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ handlers.py
    from database import get_manual_tasks, count_total_submissions, get_user_submission_for_task

    tasks = get_manual_tasks()

    # 1. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª –∫–æ–ª–±—ç–∫ (—Ç.–µ. –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é)
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}") 
    
    photo = FSInputFile("tasks.png")  # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å —Ñ–æ–Ω–æ–º –¥–ª—è —Ä—É—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

    text_lines = ["üõ† **–†—É—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è**\n"]
    kb_buttons = []

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
    for t in tasks:
        task_id = t["id"]
        stars = t["stars"]

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        try:
            max_lim = int(t.get("max_submissions") or 0)
        except ValueError:
            max_lim = 0
            
        total = count_total_submissions(task_id)
        if max_lim > 0 and total >= max_lim:
            continue  # –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ‚Üí –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usr_sub = get_user_submission_for_task(user_id, task_id)
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ("pending") –∏–ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ("approved") ‚Üí –∑–∞–¥–∞–Ω–∏–µ —Å–∫—Ä—ã–≤–∞–µ–º
        if usr_sub and usr_sub["status"] in ("pending", "approved"):
            continue 

        # üîπ –ï—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        text_lines.append(f"#{task_id} - {t.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî **{stars} ‚≠êÔ∏è**")
        kb_buttons.append([InlineKeyboardButton(text=f"–û—Ç–∫—Ä—ã—Ç—å #{task_id}", callback_data=f"manual_open_{task_id}")])

    
    # 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    if len(kb_buttons) == 0:
        caption = "üõ† **–†—É—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.** –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã."
        kb_empty = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", url="t.me/surnamesks")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
        final_kb = kb_empty
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
        kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")])
        final_kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        caption = "\n".join(text_lines)

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    await callback.message.answer_photo(
        photo=photo,
        caption=caption,
        reply_markup=final_kb,
        parse_mode="Markdown" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    )

    # callback.answer() —É–∂–µ –≤ –Ω–∞—á–∞–ª–µ


@router.callback_query(lambda c: c.data and c.data.startswith("manual_open_"))
async def manual_open_cb(callback: types.CallbackQuery):
    from database import get_manual_task, get_user_submission_for_task
    try:
        task_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return
    
    t = get_manual_task(task_id)
    if not t:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º **–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç** –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –Ω–∞–≥—Ä–∞–¥—ã
    text = (
        f"üõ† <b>{t.get('title')}</b>\n\n"
        f"{t.get('description')}\n\n"
        f"–°—Å—ã–ª–∫–∞: <a href='{t.get('link')}'>{t.get('link')}</a>\n\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: <b>{t.get('stars')} ‚≠êÔ∏è</b>"
    )

    usr_sub = get_user_submission_for_task(callback.from_user.id, task_id)
    if usr_sub:
        text += f"\n\n–í–∞—à —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>{usr_sub['status']}</b>"
        
    kb_buttons = []
    if not usr_sub or usr_sub["status"] == "rejected":
        kb_buttons.append([InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"manual_start_{task_id}")])
        
    kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manual_tasks_list")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ safe_edit_text –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_caption
    try:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML" # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        )
    except TelegramBadRequest as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É "Message is not modified" (–∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
        if "message is not modified" not in str(e):
            # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –µ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å
            raise

    await callback.answer()

from aiogram.fsm.context import FSMContext
from database import get_manual_task
@router.callback_query(F.data.startswith("cancel_manual_upload_"))
async def cancel_manual_upload_cb(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[-1])

    # ‚ùå —É–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ referrals, —á—Ç–æ–±—ã –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –∂–¥–∞—Ç—å —Ñ–æ—Ç–æ
    referrals.pop(callback.from_user.id, None)

    from database import get_manual_task
    task = get_manual_task(task_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f"manual_start_{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manual_tasks_list")]
    ])

    if task:
        await callback.message.edit_text(
            f"üõ† {task['title']}\n\n{task.get('description','')}\n\n–ù–∞–≥—Ä–∞–¥–∞: {task['stars']} ‚≠êÔ∏è",
            reply_markup=kb
        )
    else:
        await callback.message.edit_text("‚õîÔ∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await callback.answer("‚õîÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")



@router.callback_query(lambda c: c.data and c.data.startswith("manual_start_"))
async def manual_start_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        task_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return
    referrals[user_id] = {"await_manual_screenshot": True, "manual_task_id": task_id}
    kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_manual_upload_{task_id}")]
    ])
    sent_msg = await callback.message.edit_text(
    "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.\n"
    "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞–¥–∞–Ω–∏–µ —É–π–¥—ë—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
    reply_markup=kb
)
    referrals[user_id]["request_msg_id"] = sent_msg.message_id
    await callback.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç")


@router.message(F.photo)
async def handle_manual_photo(message: types.Message):
    user_id = message.from_user.id
    state = referrals.get(user_id)
    if not state or not state.get("await_manual_screenshot"):
        return
    manual_task_id = state["manual_task_id"]

    try:
        req_msg_id = state.get("request_msg_id")
        if req_msg_id:
            await message.bot.delete_message(chat_id=user_id, message_id=req_msg_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    file_id = message.photo[-1].file_id
    from database import create_manual_submission, submit_manual_submission, get_manual_submission_by_id, get_manual_task













    sub_id = create_manual_submission(user_id, manual_task_id, file_id)
    # —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ pending –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    submit_manual_submission(sub_id)
    sub = get_manual_submission_by_id(sub_id)
    mt = get_manual_task(manual_task_id)
    notif_text = (
        f"üÜï –ù–æ–≤–∞—è —Ä—É—á–Ω–∞—è –∑–∞—è–≤–∫–∞ #{sub_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{sub.get('username') or sub['user_id']} (ID {sub['user_id']})\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: {mt.get('title') or sub.get('manual_task_id')}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {mt.get('stars') or 0} ‚≠êÔ∏è\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {sub.get('created_at')}"
    )
    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"manual_submission_approve_{sub_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"manual_submission_reject_{sub_id}"),
        InlineKeyboardButton(text="–ù–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤", callback_data=f"manual_submission_rejectd_{sub_id}"),
        InlineKeyboardButton(text="–ë—ã–ª —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ", callback_data=f"manual_submission_rejectnot_{sub_id}")],

    ])
    bot = message.bot
    for admin in ADMIN_ID:
        try:
            await bot.send_photo(admin, file_id, caption=notif_text, reply_markup=admin_kb)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin}: {e}")
    kb_back = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä—É—á–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º", callback_data="manual_tasks_list")]
    ])
    await message.answer("‚åõ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=kb_back)
    referrals.pop(user_id, None)


@router.callback_query(lambda c: c.data and c.data.startswith("submit_manual_"))
async def submit_manual_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        sub_id = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return
    from database import get_manual_submission_by_id, submit_manual_submission
    sub = get_manual_submission_by_id(sub_id)
    if not sub:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    submit_manual_submission(sub_id)
    notif_text = (
        f"üÜï –ù–æ–≤–∞—è —Ä—É—á–Ω–∞—è –∑–∞—è–≤–∫–∞ #{sub_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{sub.get('username') or sub['user_id']} (ID {sub['user_id']})\n"
        f"–ó–∞–¥–∞–Ω–∏–µ ID: {sub.get('manual_task_id')}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {sub.get('stars')} ‚≠êÔ∏è\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {sub.get('created_at')}"
    )
    s = get_manual_submission_by_id(sub_id)
    file_id = s['file_id']
    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"manual_submission_approve_{sub_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"manual_submission_reject_{sub_id}")],
    ])
    from aiogram import Bot
    bot = callback.bot
    for admin in ADMIN_ID:
        try:
            await bot.send_photo(admin, file_id, caption=notif_text, _markup=admin_kb)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin}: {e}")
    await callback.message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("manual_submission_approve_"))
async def admin_manual_submission_approve_cb(callback: types.CallbackQuery, bot: Bot):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    sub_id = int(callback.data.split("_")[-1])
    from database import (
        get_manual_submission_by_id,
        update_manual_submission_status,
        update_stars,
        increment_manual_task_use  # üî• –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
    )

    sub = get_manual_submission_by_id(sub_id)
    if not sub or sub['status'] == 'approved':
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    update_manual_submission_status(sub_id, "approved")
    uid = sub['user_id']
    stars = float(sub.get('stars') or 0)

    # –Ω–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã
    update_stars(uid, stars, reason=f"–†—É—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{sub['manual_task_id']} –æ–¥–æ–±—Ä–µ–Ω–æ")

    # üî• —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è
    increment_manual_task_use(sub['manual_task_id'])

    try:
        await bot.send_message(uid, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{sub_id} –æ–¥–æ–±—Ä–µ–Ω–∞. –í—ã –ø–æ–ª—É—á–∏–ª–∏ {stars} ‚≠êÔ∏è")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    try:
        await callback.message.edit_caption(callback.message.caption + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ")
    except:
        pass


@router.callback_query(lambda c: c.data and c.data.startswith("manual_submission_rejectd_"))
async def admin_manual_submission_rejectd_cb(callback: types.CallbackQuery, bot: Bot):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    sub_id = int(callback.data.split("_")[-1])
    from database import get_manual_submission_by_id, update_manual_submission_status
    sub = get_manual_submission_by_id(sub_id)
    if not sub or sub['status'] in ('rejected','approved'):
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return
    update_manual_submission_status(sub_id, "rejected")
    uid = sub['user_id']
    try:
        await bot.send_message(uid, f"‚õîÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{sub_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏–∂–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –±–æ—Ç–µ(—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è)")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    try:
        await callback.message.edit_caption(callback.message.caption + "\\n\\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    except:
        pass

@router.callback_query(lambda c: c.data and c.data.startswith("manual_submission_rejectnot_"))
async def admin_manual_submission_rejectnot_cb(callback: types.CallbackQuery, bot: Bot):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    sub_id = int(callback.data.split("_")[-1])
    from database import get_manual_submission_by_id, update_manual_submission_status
    sub = get_manual_submission_by_id(sub_id)
    if not sub or sub['status'] in ('rejected','approved'):
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return
    update_manual_submission_status(sub_id, "rejected")
    uid = sub['user_id']
    try:
        await bot.send_message(uid, f"‚õîÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{sub_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: –í—ã –±—ã–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    try:
        await callback.message.edit_caption(callback.message.caption + "\\n\\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    except:
        pass

@router.callback_query(lambda c: c.data and c.data.startswith("manual_submission_reject_"))
async def admin_manual_submission_reject_cb(callback: types.CallbackQuery, bot: Bot):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    sub_id = int(callback.data.split("_")[-1])
    from database import get_manual_submission_by_id, update_manual_submission_status
    sub = get_manual_submission_by_id(sub_id)
    if not sub or sub['status'] in ('rejected','approved'):
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return
    update_manual_submission_status(sub_id, "rejected")
    uid = sub['user_id']
    try:
        await bot.send_message(uid, f"‚õîÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{sub_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    try:
        await callback.message.edit_caption(callback.message.caption + "\\n\\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    except:
        pass




@router.callback_query(F.data == "admin_manual_submissions")
async def admin_manual_submissions_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        await callback.answer()
        return
    from database import get_manual_submissions
    pending = get_manual_submissions(status="pending")
    if not pending:
        await callback.message.edit_text("üì• –ù–µ—Ç —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=admin_main_kb)
        await callback.answer()
        return
    text_lines = ["üì• –†—É—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ (pending):"]
    kb = InlineKeyboardBuilder()
    for p in pending:
        sid = p["id"]
        uid = p["user_id"]
        title = p.get("title") or f'–ó–∞–¥–∞–Ω–∏–µ {p.get("manual_task_id")}'
        stars = p.get("stars") or 0
        text_lines.append(f"#{sid} ‚Äî @{p.get('username') or uid} ‚Äî {title} ‚Äî {stars} ‚≠êÔ∏è")
        kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å #{sid}", callback_data=f"admin_manual_submission_{sid}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    await safe_edit_text(callback, "\n".join(text_lines), kb.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("admin_manual_submission_"))
async def admin_manual_submission_view_cb(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in admin_sessions:
        await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    try:
        sid = int(callback.data.split("_")[-1])
    except:
        await callback.answer()
        return
    from database import get_manual_submission_by_id, get_manual_task
    s = get_manual_submission_by_id(sid)
    if not s:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    mt = get_manual_task(s.get("manual_task_id"))
    uid = s.get("user_id")
    username = s.get("username") or f"User{uid}"
    text = (
        f"üì• –ó–∞—è–≤–∫–∞ #{sid}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID {uid})\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: {mt.get('title') if mt else s.get('manual_task_id')}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {mt.get('stars') if mt else s.get('stars') or 0} ‚≠êÔ∏è\n"
        f"–°—Ç–∞—Ç—É—Å: {s.get('status')}\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {s.get('created_at')}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"manual_submission_approve_{sid}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"manual_submission_reject_{sid}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_manual_submissions")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    # Try to send photo as well
    try:
        await callback.message.bot.send_photo(admin_id, s.get("file_id"), caption=text, reply_markup=kb)
        try:
            await callback.message.delete()
        except:
            pass
    except Exception:
        await safe_edit_text(callback, text, kb)
    await callback.answer()

@router.callback_query(F.data == "roulette_menu")
async def show_roulette_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    if not user:
        await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        await callback.answer()
        return
    data = await flyer_check_subscription(user_id, callback.message)
    kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
        ]
    )
    if not data.get("skip"):
        await callback.message.answer(
            data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
            reply_markup=kb
        )
        await callback.answer()  # –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Üí –Ω–µ –±—É–¥–µ—Ç –∞–ª–µ—Ä—Ç–∞
        return

    info = get_user_info(user)
    await callback.message.answer(
        f"<b>üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É üëá</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {info['stars']:.2f} ‚≠ê",
        reply_markup=roulette_keyboard(),
        parse_mode="HTML"
    )

# –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫
def roulette_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="0.5 ‚≠ê", callback_data="roulette_0.5"),
            InlineKeyboardButton(text="1 ‚≠ê", callback_data="roulette_1"),
            InlineKeyboardButton(text="2 ‚≠ê", callback_data="roulette_2"),
        ],
        [
            InlineKeyboardButton(text="3 ‚≠ê", callback_data="roulette_5"),
            InlineKeyboardButton(text="5 ‚≠ê", callback_data="roulette_5"),
            InlineKeyboardButton(text="10 ‚≠ê", callback_data="roulette_10"),
        ],
        [
            InlineKeyboardButton(text="50 ‚≠ê", callback_data="roulette_50"),
            InlineKeyboardButton(text="100 ‚≠ê", callback_data="roulette_100"),
            InlineKeyboardButton(text="500 ‚≠ê", callback_data="roulette_500"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    return kb


@router.callback_query(lambda c: c.data.startswith("roulette_"))
async def roulette_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    bet = float(callback.data.split("_")[1])
    data = await flyer_check_subscription(user_id, callback.message)
    kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]
        ]
    )
    if not data.get("skip"):
        await callback.message.answer(
            await callback.answer(data.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"), reply_markup=kb)
        )
        await callback.answer()
        return

    with get_conn() as conn:
        cur = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        cur.execute("SELECT stars FROM users WHERE id = ?", (user_id,))
        row = cur.fetchone()
        if not row:
            await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!", show_alert=True)
            return

        balance = row["stars"]

        if balance < bet:
            await callback.answer("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠ê –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        cur.execute("UPDATE users SET stars = stars - ? WHERE id = ?", (bet, user_id))

        # –†—É–ª–µ—Ç–∫–∞: —à–∞–Ω—Å 20% –Ω–∞ –ø–æ–±–µ–¥—É
        if random.random() < 0.2:
            win = bet * 2
            cur.execute("UPDATE users SET stars = stars + ? WHERE id = ?", (win, user_id))
            conn.commit()
            await callback.answer(
                f"üéâ –£–¥–∞—á–∞! –°—Ç–∞–≤–∫–∞ {bet} ‚≠ê —Å—ã–≥—Ä–∞–ª–∞!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} ‚≠ê",
                show_alert=True
            )
        else:
            conn.commit()
            await callback.answer(
                f"üòî –ù–µ—É–¥–∞—á–∞! –°—Ç–∞–≤–∫–∞ {bet} ‚≠ê –Ω–µ —Å—ã–≥—Ä–∞–ª–∞.\n–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç üôè",
                show_alert=True
            )

FRUITS = ["üçé", "üçå", "üçá", "üçä", "üçâ", "üçí"]

captcha_answers = {}  # user_id -> fruit


processing_clicker = set()        # –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–ø—á–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
captcha_sessions = {}            # {user_id: {"answer": "Apple", "created": datetime}}

CAPTCHA_TTL = timedelta(minutes=2)   # –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–∞–ø—á–∏ (2 –º–∏–Ω—É—Ç—ã)
CLICKER_COOLDOWN = timedelta(minutes=10)  # –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —É—Å–ø–µ—à–Ω—ã–º–∏ –∫–ª–∏–∫–∞–º–∏


@router.callback_query(F.data == "clicker")
async def clicker_start(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)

    # --- –ê–í–¢–û-–û–ß–ò–°–¢–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ù–û–ô –°–ï–°–°–ò–ò ---
    sess = captcha_sessions.get(user_id)
    if sess and datetime.utcnow() - sess["created"] > CAPTCHA_TTL:
        captcha_sessions.pop(user_id, None)
        processing_clicker.discard(user_id)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –µ—â—ë —Å–µ—Å—Å–∏—è ---
    if user_id in processing_clicker:
        await callback.answer("‚è≥ –í—ã –ø—ã—Ç–∞–ª–∏—Å—å –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 2-—Ö –º–∏–Ω—É—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # --- –ü–†–û–í–ï–†–ö–ê –ö–£–õ–î–ê–£–ù–ê (–¢–û–õ–¨–ö–û –ï–°–õ–ò –ü–†–û–®–õ–ê –ö–ê–ü–ß–ê –£–°–ü–ï–®–ù–û) ---
    last_click = get_last_click(user_id)
    if last_click:
        last_dt = datetime.fromisoformat(last_click)
        if datetime.utcnow() - last_dt < CLICKER_COOLDOWN:
            await callback.answer("‚è≥ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–∫–µ—Ä —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç!", show_alert=True)
            return

    # --- 1. –ü–†–û–í–ï–†–ö–ê FLYER ---
    data_flyer = await flyer_check_subscription(user_id, callback.message)
    if not data_flyer.get("skip"):
        kb_flyer = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]]
        )
        
        info_text = data_flyer.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ")
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò TelegramBadRequest ---
        try:
            # 1. –ü—Ä–æ–±—É–µ–º edit_caption (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞)
            await callback.message.edit_caption(
                caption=info_text,
                reply_markup=kb_flyer
            )
        except TelegramBadRequest:
            # 2. –ï—Å–ª–∏ edit_caption –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º edit_text
            try:
                await callback.message.edit_text(
                    text=info_text,
                    reply_markup=kb_flyer
                )
            except TelegramBadRequest:
                # 3. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    info_text,
                    reply_markup=kb_flyer
                )
                
        await callback.answer()
        return

    # --- 2. –ü–†–û–í–ï–†–ö–ê SUBGRAM ---
    data_subgram = await subgram_check_wrapper(user=callback.from_user, message=callback.message, action="subscribe")
    if not data_subgram.get("skip"):
        # –ï—Å–ª–∏ subgram_check_wrapper –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –æ–Ω –æ–±—ã—á–Ω–æ —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
        return

    # --- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
    if not user:
        await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        await callback.answer()
        return

    # ‚úÖ –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ —Å–µ—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    processing_clicker.add(user_id)

    # --- 4. –°–æ–∑–¥–∞—ë–º –∫–∞–ø—á—É ---
    correct = random.choice(FRUITS)
    shuffled = random.sample(FRUITS, len(FRUITS))
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=fruit, callback_data=f"clicker_ans_{fruit}") for fruit in shuffled[i:i + 3]]
        for i in range(0, len(shuffled), 3)
    ])

    captcha_sessions[user_id] = {"answer": correct, "created": datetime.utcnow()}

    await callback.message.answer(
        f"ü§ñ –ü–†–û–í–ï–†–ö–ê –ù–ê –†–û–ë–û–¢–ê\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –≥–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ ¬´{correct}¬ª\n\n"
        "‚è± –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É.",
        reply_markup=kb
    )
    await callback.answer()

    # üîÅ –ê–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    async def auto_expire():
        await asyncio.sleep(CAPTCHA_TTL.total_seconds())
        sess = captcha_sessions.get(user_id)
        if sess and datetime.utcnow() - sess["created"] > CAPTCHA_TTL:
            captcha_sessions.pop(user_id, None)
            processing_clicker.discard(user_id)

    asyncio.create_task(auto_expire())




@router.callback_query(lambda c: c.data.startswith("clicker_ans_"))
async def clicker_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Å—Å–∏–∏ ---
    sess = captcha_sessions.get(user_id)
    if not sess:
        await callback.answer("‚õîÔ∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–ª–∏–∫–µ—Ä –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        processing_clicker.discard(user_id)
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ ---
    if datetime.utcnow() - sess["created"] > CAPTCHA_TTL:
        captcha_sessions.pop(user_id, None)
        processing_clicker.discard(user_id)
        try:
            await callback.message.delete()
        except:
            pass
        await callback.answer("‚åõ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ FLYER ---
    data_flyer = await flyer_check_subscription(user_id, callback.message)
    if not data_flyer.get("skip"):
        kb_flyer = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="fp_check")]]
        )
        await callback.message.edit_text(
            data_flyer.get("info", "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. üëÜ"),
            reply_markup=kb_flyer
        )
        captcha_sessions.pop(user_id, None)
        processing_clicker.discard(user_id)
        await callback.answer()
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ SUBGRAM ---
    data_subgram = await subgram_check_wrapper(user=callback.from_user, message=callback.message, action="clicker_answer")
    if not data_subgram.get("skip"):
        captcha_sessions.pop(user_id, None)
        processing_clicker.discard(user_id)
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
    if not user:
        captcha_sessions.pop(user_id, None)
        processing_clicker.discard(user_id)
        await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        await callback.answer()
        return

    # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç ---
    choice = callback.data.split("_")[-1]
    correct = sess["answer"]

    if choice != correct:
        captcha_sessions.pop(user_id, None)
        processing_clicker.discard(user_id)
        try:
            await callback.message.delete()
        except:
            pass
        await callback.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return

    # --- –í—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–≥—Ä–∞–¥–∞ ---
    vip = get_vip_level(user_id)
    if vip == 0:
        reward = 0.1
    elif vip == 1:
        reward = 0.1
    elif vip == 2:
        reward = 0.2
    elif vip == 3:
        reward = 0.4
    else:
        reward = 0.1

    update_stars(user_id, reward, reason="Clicker reward")
    update_last_click(user_id)  # –§–∏–∫—Å–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫

    # –û—á–∏—Å—Ç–∫–∞
    captcha_sessions.pop(user_id, None)
    processing_clicker.discard(user_id)

    try:
        await callback.message.delete()
    except:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    await callback.answer(f"‚úÖ –¢—ã –ø–æ–ª—É—á–∏–ª(–∞): {reward} ‚≠êÔ∏è", show_alert=True)

    photo = FSInputFile("profile.png")  # —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    msg = (
        f"üìãüë• <i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!</i>\n\n"
        f"<blockquote>–ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ = —á–µ—Å—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã üíé\n‚õîÔ∏è –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</blockquote>"
    )

    await callback.message.answer_photo(
        photo=photo,
        caption=msg,
        parse_mode="HTML",
        reply_markup=main_menu_kb
    )



clicker_top_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–¢–æ–ø –∫–ª–∏–∫–µ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="top_clicker_today")],
    [InlineKeyboardButton(text="–¢–æ–ø –∫–ª–∏–∫–µ—Ä–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="top_clicker_all")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back_to_menu")]
])

@router.callback_query(F.data == "clicker_top")
async def clicker_top_menu(callback: types.CallbackQuery):

    photo = FSInputFile("tops.png")  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª
    msg = (
        f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ø–∞ –ø–æ –∫–ª–∏–∫–µ—Ä—É:"
    )

    await callback.message.answer_photo(
        photo=photo,
        caption=msg,
        parse_mode="HTML",
        reply_markup=clicker_top_kb
    )

@router.callback_query(F.data.in_(["top_clicker_today", "top_clicker_all"]))
async def clicker_top_show(callback: types.CallbackQuery):
    today_only = callback.data == "top_clicker_today"
    title = "ü•á –¢–æ–ø-5 –ø–æ –∫–ª–∏–∫–µ—Ä—É —Å–µ–≥–æ–¥–Ω—è" if today_only else "ü•á –¢–æ–ø-5 –ø–æ –∫–ª–∏–∫–µ—Ä—É –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    
    top = get_top_clicker_users(today_only=today_only)[:5]  # –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if not top:
        text = f"{title}\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        medals = ["ü•á", "ü•à", "ü•â"]
        lines = []
        for i, (name, value) in enumerate(top):
            emoji = medals[i] if i < 3 else f"{i+1}."
            lines.append(f"{emoji} {name} ‚Äî {value} –∫–ª–∏–∫–æ–≤")
        text = title + "\n\n" + "\n".join(lines)

    photo = FSInputFile("tops.png")  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ–æ—Ç–∫—É, —á—Ç–æ –∏ –≤ –º–µ–Ω—é
    await callback.message.edit_media(
        media=types.InputMediaPhoto(media=photo, caption=text),
        reply_markup=statistics_back_kb
    )
    await callback.answer()

@router.callback_query(F.data == "admin_vip_users")
async def admin_vip_users(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT id, username, full_name, vip_level FROM users WHERE vip_level > 0")
    users = cur.fetchall()

    if not users:
        await callback.message.answer("‚õîÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å VIP-–ø–æ–¥–ø–∏—Å–∫–∞–º–∏")
        await callback.answer()
        return

    lines = []
    for u in users:
        name = u["full_name"] or (f"@{u['username']}" if u["username"] else str(u["id"]))
        vip_text = {1: "I —Å—Ç–µ–ø–µ–Ω–∏", 2: "II —Å—Ç–µ–ø–µ–Ω–∏", 3: "III —Å—Ç–µ–ø–µ–Ω–∏"}.get(u["vip_level"], f"{u['vip_level']}-–≥–æ —É—Ä–æ–≤–Ω—è")
        lines.append(f"üë§ {name} ‚Äî VIP {vip_text}")

    await callback.message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:\n\n" + "\n".join(lines))
    await callback.answer()

async def daily_promo_task(bot: Bot):
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∑–∞–º–∏: 25, 20, 15, 10, 7
    promo_text = (
        "üî• **–£—Å–ø–µ–π –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!** üî•\n\n"
        "–°–æ–±–µ—Ä–∏ –±–æ–ª—å—à–µ –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–∑ —Å–µ–≥–æ–¥–Ω—è –≤ 23:59:\n\n"
        "ü•á 1-–µ –º–µ—Å—Ç–æ: + 25 ‚≠êÔ∏è\n"
        "ü•à 2-–µ –º–µ—Å—Ç–æ: + 20 ‚≠êÔ∏è\n"
        "ü•â 3-–µ –º–µ—Å—Ç–æ: + 15 ‚≠êÔ∏è\n"
        "4-–µ –º–µ—Å—Ç–æ: + 10 ‚≠êÔ∏è\n"
        "5-–µ –º–µ—Å—Ç–æ: + 7 ‚≠êÔ∏è\n\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –º–æ–∂–µ—à—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–¢–æ–ø¬ª"
    )
    
    print("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞.")
    while True:
        now = datetime.utcnow()
        # –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: 18:00:00 UTC (—ç—Ç–æ 21:00:00 MSK)
        target_time = time(hour=18, minute=0) 
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è
        target_datetime_today = datetime.combine(now.date(), target_time)
        
        # –ï—Å–ª–∏ 18:00 UTC (21:00 MSK) —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if now > target_datetime_today:
            target_datetime = datetime.combine(now.date() + timedelta(days=1), target_time)
        else:
            target_datetime = target_datetime_today
            
        sleep_seconds = (target_datetime - now).total_seconds()
        
        print(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –≤ {target_datetime.isoformat()} UTC (21:00). –ß–µ—Ä–µ–∑ {sleep_seconds / 3600:.2f} —á–∞—Å–æ–≤.")
        
        await asyncio.sleep(sleep_seconds)
        
        print("–í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ! –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫—É.")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        conn = get_conn()
        cur = conn.cursor()
        cur.execute("SELECT id FROM users")
        all_user_ids = [row[0] for row in cur.fetchall()]
        
        print(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        for user_id in all_user_ids:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(user_id, promo_text, parse_mode="Markdown")
                await asyncio.sleep(0.05) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
                continue
        print("–ü—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

