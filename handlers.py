import sqlite3
import os
import re
import asyncio
import logging
import httpx # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –î–õ–Ø –ê–°–ò–ù–•–†–û–ù–ù–´–• –ó–ê–ü–†–û–°–û–í
from typing import List, Optional, Dict
from datetime import datetime, date, timedelta
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

# -----------------------------------------------------------
# --------------------- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---------------------
# -----------------------------------------------------------

# !!! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø –ù–ê –í–ê–®–ò !!!
BOT_TOKEN = "8417661454:AAFxQA5ASaCYyknxt_zJBLpK2I9yP6bti-c" 
ADMIN_ID = 1500618394  # –í–∞—à Telegram ID
# -----------------------------------------------------------

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –õ–û–ì–ò–ö–ò –ó–ê–ö–ê–ó–û–í ---
USER_ORDER_COST_STARS = 2.0 # –¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (2 –∑–≤–µ–∑–¥—ã –∑–∞ 1 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞)
USER_TASK_REWARD_STARS = 1.0 # –ù–∞–≥—Ä–∞–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (1 –∑–≤–µ–∑–¥–∞ –∑–∞ 1 –ø–æ–¥–ø–∏—Å–∫—É)

# --- –ö–û–ù–°–¢–ê–ù–¢–´ FLYER API (–î–û–ë–ê–í–õ–ï–ù–û) ---
FLYER_API_KEY = "FL-kQDJlw-CUUelI-KCQwTc-pajfkp" # <--- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–¨!
FLYER_API_ENDPOINT = "https://api.flyerservice.io"
FLYER_TASK_REWARD = 1.0 # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ Flyer
# -----------------------------------------------------------

# --- –ü–£–¢–¨ –ö –ë–ê–ó–ï ---
DB_PATH = os.getenv("DB_PATH", "bot.db") 
os.makedirs(os.path.dirname(DB_PATH) or '.', exist_ok=True)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï DB ---
_conn = None
_initialized = False
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
router = Router()

# -----------------------------------------------------------
# ------------------ 2. –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ------------------
# -----------------------------------------------------------

# ... (–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î (get_conn, init_db, add_user, get_user, update_stars,
#      add_user_order, get_user_orders, get_order_details, 
#      increment_order_completion, get_next_order_task, add_user_task_done)
#      –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
#      –Ø –∏—Ö –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –∫–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º.
#      –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —Å—é–¥–∞ —Ü–µ–ª–∏–∫–æ–º.

def get_conn():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    global _conn, _initialized
    if _conn is None:
        _conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=30) 
        _conn.row_factory = sqlite3.Row
    if not _initialized:
        init_db(_conn)
        _initialized = True
    return _conn

def init_db(conn):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    cur = conn.cursor()

    # 1. USERS (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        stars REAL DEFAULT 0.0,
        referrer_id INTEGER DEFAULT NULL,
        registration_date TEXT DEFAULT (DATETIME('now'))
    )
    """)

    # 2. TASKS (–ó–∞–¥–∞–Ω–∏—è/–ó–∞–∫–∞–∑—ã)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS tasks ( 
        id INTEGER PRIMARY KEY,
        channel TEXT,
        stars REAL,
        max_completions INTEGER,
        current_completions INTEGER DEFAULT 0,
        type TEXT,
        creator_id INTEGER
    )
    """)
    
    # 3. USER_TASKS_DONE (–ö—Ç–æ –∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏–ª)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS user_tasks_done (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        task_id INTEGER,
        created_at TEXT DEFAULT (DATETIME('now')),
        UNIQUE(user_id, task_id)
    )
    """)

    conn.commit()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# --- CRUD –¥–ª—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ó–≤–µ–∑–¥ ---

def add_user(user_id: int, referrer_id: Optional[int] = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    conn = get_conn()
    cur = conn.cursor()
    
    if referrer_id is not None and referrer_id == user_id:
        referrer_id = None
        
    try:
        cur.execute(
            "INSERT OR IGNORE INTO users (id, referrer_id) VALUES (?, ?)", 
            (user_id, referrer_id)
        )
        conn.commit()
    except Exception as e:
        logging.error(f"Error adding user {user_id}: {e}")

def get_user(user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    return dict(row) if row else None
    
def update_stars(user_id: int, delta: float, reason: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("UPDATE users SET stars = stars + ? WHERE id = ?", (delta, user_id))
    conn.commit()

# --- CRUD –¥–ª—è –ó–∞–∫–∞–∑–æ–≤ ---

def add_user_order(user_id: int, channel: str, max_subs: int) -> Optional[int]:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É."""
    conn = get_conn()
    cur = conn.cursor()
    
    try:
        cur.execute(
            "INSERT INTO tasks (channel, stars, max_completions, current_completions, type, creator_id) VALUES (?, ?, ?, 0, 'user_channel', ?)",
            (channel, USER_TASK_REWARD_STARS, max_subs, user_id)
        )
        conn.commit()
        return cur.lastrowid
    except Exception as e:
        logging.error(f"Error adding user order: {e}")
        return None

def get_user_orders(user_id: int) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM tasks WHERE creator_id = ? ORDER BY id DESC", (user_id,))
    return [dict(row) for row in cur.fetchall()]

def get_order_details(task_id: int) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞/–∑–∞–¥–∞–Ω–∏—è."""
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
    row = cur.fetchone()
    return dict(row) if row else None

def increment_order_completion(task_id: int) -> bool:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."""
    conn = get_conn()
    cur = conn.cursor()
    try:
        cur.execute(
            "UPDATE tasks SET current_completions = current_completions + 1 WHERE id = ? AND current_completions < max_completions", 
            (task_id,)
        )
        conn.commit()
        return cur.rowcount > 0 
    except Exception as e:
        logging.error(f"Error incrementing order completion: {e}")
        return False
        
def get_next_order_task(user_id: int) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        SELECT t.*
        FROM tasks t
        LEFT JOIN user_tasks_done utd ON t.id = utd.task_id AND utd.user_id = ?
        WHERE t.creator_id != ? 
          AND t.type = 'user_channel'
          AND t.current_completions < t.max_completions
          AND utd.task_id IS NULL 
        ORDER BY RANDOM()
        LIMIT 1
    """, (user_id, user_id))
    row = cur.fetchone()
    return dict(row) if row else None
    
def add_user_task_done(user_id: int, task_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ."""
    conn = get_conn()
    cur = conn.cursor()
    try:
        cur.execute("INSERT OR IGNORE INTO user_tasks_done (user_id, task_id) VALUES (?, ?)", (user_id, task_id))
        conn.commit()
    except Exception as e:
        logging.error(f"Error adding user task done: {e}")


# -----------------------------------------------------------
# --------------------- 3. –õ–û–ì–ò–ö–ê –ë–û–¢–ê ----------------------
# -----------------------------------------------------------

# --- FSM STATES ---
class OrderState(StatesGroup):
    WAITING_FOR_CHANNEL_USERNAME = State()
    WAITING_FOR_TARGET_SUBS = State()

# --- KEYBOARDS ---

main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üë§ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å üë§", callback_data="profile"),
    ],
    [
        InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="buy_subs_start"), # <-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–ï–ß–ê–¢–ö–ò
        InlineKeyboardButton(text="üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="earn_task_menu"),
    ],
    [
        InlineKeyboardButton(text="–í–∞—à–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
    ]
])

def get_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])

# --- HELPER FUNCTIONS ---

async def show_main_menu(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM."""
    await state.clear()
    user_id = message_or_callback.from_user.id
    user_db = get_user(user_id)
    stars = user_db.get('stars', 0) if user_db else 0

    msg = (
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: **{stars:.1f} ‚≠êÔ∏è**\n\n"
        f"üìà **{USER_ORDER_COST_STARS:.1f} ‚≠êÔ∏è**/–ø–æ–¥–ø–∏—Å—á–∏–∫ (–ü–æ–∫—É–ø–∫–∞). **{USER_TASK_REWARD_STARS:.1f} ‚≠êÔ∏è**/–ø–æ–¥–ø–∏—Å–∫–∞ (–ó–∞—Ä–∞–±–æ—Ç–æ–∫)."
    )
    
    if isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.edit_text(
            msg,
            parse_mode="Markdown",
            reply_markup=main_menu_kb
        )
        await message_or_callback.answer()
    else:
         await message_or_callback.answer(
            msg,
            parse_mode="Markdown",
            reply_markup=main_menu_kb
        )

# --- –ù–û–í–´–ï –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø FLYER API ---

async def get_flyer_tasks(user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –æ—Ç Flyer API —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    logging.info(f"[Flyer] –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if FLYER_API_KEY == "FL-kQDJlw-CUUelI-KCQwTc-pajfkp":
        logging.warning("[Flyer] API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞.")
        return None
        
    async with httpx.AsyncClient(base_url=FLYER_API_ENDPOINT, timeout=10) as client:
        try:
            response = await client.post(
                "/get_tasks",
                json={
                    "key": FLYER_API_KEY,
                    "user_id": user_id,
                    "limit": 1
                }
            )
            logging.info(f"[Flyer] –û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω: {response.status_code}")
            response.raise_for_status()
            data = response.json()
            
            if data.get('error'):
                logging.error(f"[Flyer] API Error (get_tasks): {data['error']}")
                return None
            
            if data.get('result') and isinstance(data['result'], list) and data['result']:
                logging.info(f"[Flyer] –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: {data['result'][0].get('signature')}")
                return data['result'][0]
                
        except httpx.HTTPStatusError as e:
            logging.error(f"[Flyer] HTTP Error: {e.response.status_code} - {e.response.text}")
        except httpx.RequestError as e:
            logging.error(f"[Flyer] Request Error: {e}")
        except Exception as e:
            logging.error(f"[Flyer] Unknown Error: {e}")
            
    logging.info(f"[Flyer] –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return None


async def check_flyer_task(user_id: int, signature: str) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ Flyer —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    logging.info(f"[Flyer] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è {signature} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if FLYER_API_KEY == "FL-kQDJlw-CUUelI-KCQwTc-pajfkp":
        logging.warning("[Flyer] API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return {"success": False, "result": "key_error"}
        
    async with httpx.AsyncClient(base_url=FLYER_API_ENDPOINT, timeout=10) as client:
        try:
            response = await client.post(
                "/check_task",
                json={
                    "key": FLYER_API_KEY,
                    "signature": signature
                }
            )
            logging.info(f"[Flyer] –û—Ç–≤–µ—Ç –æ—Ç check_task: {response.status_code}")
            response.raise_for_status()
            data = response.json()
            
            if data.get('error'):
                logging.error(f"[Flyer] API Error (check_task): {data['error']}")
                return {"success": False, "result": "api_error", "error": data['error']}

            logging.info(f"[Flyer] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è {signature}: {data.get('result')}")
            return {"success": data.get('result') == "success", "result": data.get('result', 'failed')}
            
        except httpx.HTTPStatusError as e:
            logging.error(f"[Flyer] HTTP Error: {e.response.status_code} - {e.response.text}")
        except httpx.RequestError as e:
            logging.error(f"[Flyer] Request Error: {e}")
        except Exception as e:
            logging.error(f"[Flyer] Unknown Error: {e}")
            
    return {"success": False, "result": "internal_error"}

# --- –§–£–ù–ö–¶–ò–Ø-–û–ë–ï–†–¢–ö–ê FLYER (–û–ë–ù–û–í–õ–ï–ù–û) ---

async def flyer_check_wrapper(user: types.User, message: types.Message, action: str = "subscribe") -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É Flyer, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ—ë. 
    –ò–°–ü–†–ê–í–õ–ï–ù–ê –æ—à–∏–±–∫–∞ KeyError: 'url' –ø—É—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π 'url' –∏ 'link'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'skip': True} –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    user_id = user.id
    logging.info(f"[FlyerWrapper] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ Flyer –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if FLYER_API_KEY == "FL-kQDJlw-CUUelI-KCQwTc-pajfkp":
        logging.warning(f"[FlyerWrapper] Flyer API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return {"skip": True} 
        
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –æ—Ç Flyer
    logging.info(f"[FlyerWrapper] –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ Flyer –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    task_data = await get_flyer_tasks(user_id)
    
    if task_data:
        logging.info(f"[FlyerWrapper] –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ Flyer: {task_data}")
        reward = FLYER_TASK_REWARD  # 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –∑–∞–¥–∞—á—É Flyer
        task_signature = task_data['signature']
        
        # --- –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –°–°–´–õ–ö–ò ---
        task_url = task_data.get('url') or task_data.get('link')
        if not task_url:
            logging.error(f"[FlyerWrapper] Flyer API task {task_signature} –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ù–µ—Ç 'url' –∏ 'link'.")
            await message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏—è Flyer**. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode="Markdown",
                reply_markup=get_back_to_menu_keyboard()
            )
            return {"skip": True} 

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∏ –í—ã–ø–æ–ª–Ω–∏—Ç—å", url=task_url)], 
            [InlineKeyboardButton(text=f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ({reward:.1f} ‚≠êÔ∏è)", callback_data=f"check_flyer_{task_signature}")],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å/–°–ª–µ–¥. –∑–∞–¥–∞–Ω–∏–µ", callback_data="earn_task_menu")] 
        ])
        
        logging.info(f"[FlyerWrapper] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è Flyer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Å—Å—ã–ª–∫–∞: {task_url}")
        await message.edit_text(
            "üíé **–°–†–û–ß–ù–û–ï –ó–ê–î–ê–ù–ò–ï (Flyer)**\n\n"
            f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã **Flyer/Subgram**.\n"
            f"**–ù–∞–≥—Ä–∞–¥–∞**: **{reward:.1f} ‚≠êÔ∏è**",
            parse_mode="Markdown",
            reply_markup=kb
        )
        logging.info(f"[FlyerWrapper] –ó–∞–¥–∞—á–∞ Flyer —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return {"skip": False}  # –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –∑–∞–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ
    
    logging.info(f"[FlyerWrapper] –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–¥–∞—á Flyer –Ω–µ—Ç. –ü—Ä–æ–ø—É—Å–∫.")
    return {"skip": True}  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –∑–∞–¥–∞—á Flyer –Ω–µ—Ç



# ----------------------------- CORE HANDLERS --------------------------

# ... (command_start_handler, back_to_menu_handler, grant_stars_handler, 
#      profile_handler –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@router.message(CommandStart())
async def command_start_handler(
    message: types.Message, 
    state: FSMContext, 
    bot: Bot, 
    command: Optional[CommandObject] = None 
):
    user_id = message.from_user.id
    referrer_id = None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    if command and command.args:
        try:
            referrer_id = int(command.args)
        except ValueError:
            logging.warning(f"Invalid referrer ID format: {command.args}")
            referrer_id = None
            
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_user(user_id, referrer_id) 
    
    await show_main_menu(message, state, bot)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await show_main_menu(callback, state, bot)

# --- –ë–õ–û–ö: –ö–û–ú–ê–ù–î–ê –ê–î–ú–ò–ù–ê –î–õ–Ø –í–´–î–ê–ß–ò –ó–í–ï–ó–î ---

@router.message(F.text.startswith('/grant_stars'))
async def grant_stars_handler(message: types.Message):
    user_id = message.from_user.id
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_ID:
        await message.answer("‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.** –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # 2. –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: /grant_stars <user_id> <amount>
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/grant_stars <user_id> <—Å—É–º–º–∞>`")
        return

    try:
        target_user_id = int(parts[1])
        amount = float(parts[2])
    except ValueError:
        await message.answer("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—É–º–º—ã.** ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, —Å—É–º–º–∞ ‚Äî —á–∏—Å–ª–æ–º.")
        return

    if amount <= 0:
         await message.answer("‚ùå **–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.**")
         return

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    user_db = get_user(target_user_id)
    if not user_db:
        await message.answer(f"‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.**")
        return

    current_stars = user_db.get('stars', 0)

    # 4. –í—ã–¥–∞—á–∞ –∑–≤–µ–∑–¥
    update_stars(target_user_id, amount, reason="admin_grant")
    
    # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await message.answer(
        f"‚úÖ **–£—Å–ø–µ—Ö!**\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{target_user_id}` –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{amount:.1f} ‚≠êÔ∏è**.\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **{(current_stars + amount):.1f} ‚≠êÔ∏è**",
        parse_mode="Markdown"
    )
    
    # 6. –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(
            target_user_id,
            f"üéÅ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount:.1f} ‚≠êÔ∏è**.\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{(current_stars + amount):.1f} ‚≠êÔ∏è**",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.warning(f"Could not notify user {target_user_id} about star grant: {e}")


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô profile_handler ---

@router.callback_query(F.data == "profile")
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_db = get_user(user_id)
    stars = user_db.get('stars', 0) if user_db else 0
    
    bot_info = await callback.bot.get_me() 

    msg = (
        f"üë§ **–ú–û–ô –ü–†–û–§–ò–õ–¨**\n\n"
        f"üÜî **–í–∞—à ID**: `{user_id}`\n"
        f"üí∞ **–ë–∞–ª–∞–Ω—Å**: **{stars:.1f} ‚≠êÔ∏è**\n"
        f"üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞**: `t.me/{bot_info.username}?start={user_id}`"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id == ADMIN_ID:
         admin_info = (
             "\n\n--- üõ°Ô∏è **–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê** üõ°Ô∏è ---\n"
             "**–í—ã–¥–∞—á–∞ –∑–≤–µ–∑–¥**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
             "`/grant_stars <user_id> <—Å—É–º–º–∞>`"
         )
         msg += admin_info
    
    await callback.message.edit_text(
        msg,
        parse_mode="Markdown",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()


# --- –ë–õ–û–ö 1: –ü–û–ö–£–ü–ö–ê –ü–û–î–ü–ò–°–ß–ò–ö–û–í (buy_subs_start) ---

# ... (buy_subscribers_start, process_channel_username –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@router.callback_query(F.data == "buy_subs_start")
async def buy_subscribers_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(OrderState.WAITING_FOR_CHANNEL_USERNAME)
    await callback.message.edit_text(
        "üìù **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ó–ê–ö–ê–ó–ê**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ **@username** –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `@MyChannel`).\n\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º** –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
        ])
    )
    await callback.answer()

@router.message(OrderState.WAITING_FOR_CHANNEL_USERNAME)
async def process_channel_username(message: types.Message, state: FSMContext, bot: Bot): 
    channel_username = message.text.strip().lower()
    
    if not channel_username.startswith('@'):
        channel_username = '@' + channel_username
    
    if not re.match(r'^@[a-z0-9_]{5,32}$', channel_username):
        await message.answer("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `@ChannelUsername`.")
        return

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ (—ç—Ñ—Ñ–µ–∫—Ç "–∑–∞–≥—Ä—É–∑–∫–∏")
    checking_message = await message.answer("üîÑ **–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.** (5 —Å–µ–∫.)", parse_mode="Markdown")
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    await asyncio.sleep(5) 

    # 3. –ü–†–û–í–ï–†–ö–ê: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —á–∞—Ç–µ
        bot_member = await bot.get_chat_member(channel_username, bot.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
        if bot_member.status not in ['administrator', 'creator']:
            await checking_message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!** –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: **–¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞** –∏ **–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–º—É –ø—Ä–∞–≤–æ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (Invite Users via Link).",
                parse_mode="Markdown",
                reply_markup=get_back_to_menu_keyboard()
            )
            await state.clear()
            return
            
    except TelegramBadRequest as e:
        # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        error_text = str(e).lower()
        
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º/–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é/—Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if "chat not found" in error_text or "bot is not a member" in error_text or "member list is inaccessible" in error_text:
            await checking_message.edit_text(
                f"‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.**\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç **–¥–æ–±–∞–≤–ª–µ–Ω –∏ —è–≤–ª—è–µ—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º** –≤ –∫–∞–Ω–∞–ª–µ.",
                parse_mode="Markdown",
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            logging.error(f"TelegramBadRequest during admin check: {e}")
            await checking_message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: `{e}`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )
        await state.clear()
        return
    except Exception as e:
        logging.error(f"General error during admin check: {e}")
        await checking_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()
        return

    # 4. –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è - –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ.
        await checking_message.delete() 
    except Exception:
        pass 

    await state.update_data(channel=channel_username)
    await state.set_state(OrderState.WAITING_FOR_TARGET_SUBS)

    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª **{channel_username}** –ø—Ä–∏–Ω—è—Ç –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.\n\n"
        f"üî¢ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, **—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤** –≤—ã —Ö–æ—Ç–∏—Ç–µ. (–ú–∏–Ω–∏–º—É–º 15)\n"
        f"**–°—Ç–æ–∏–º–æ—Å—Ç—å**: **{USER_ORDER_COST_STARS:.1f} ‚≠êÔ∏è** –∑–∞ 1 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.",
        parse_mode="Markdown"
    )

@router.message(OrderState.WAITING_FOR_TARGET_SUBS)
async def process_target_subs(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    MIN_SUBS_COUNT = 15 # <-- –í–∞—à –ª–∏–º–∏—Ç 15

    try:
        count = int(message.text.strip())
        
        # --- –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê ---
        if count < MIN_SUBS_COUNT:
            await message.answer(f"‚ùå **–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤** –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Äî **{MIN_SUBS_COUNT}**.")
            return
        # ---------------------------------------------------
            
    except ValueError:
        await message.answer("‚ùå **–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.** –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 15).")
        return

    data = await state.get_data()
    channel_username = data.get("channel")
    user_db = get_user(user_id)
    current_stars = user_db.get("stars", 0)
    total_cost = count * USER_ORDER_COST_STARS

    if current_stars < total_cost:
        await message.answer(
            f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!**\n\n"
            f"–í–∞–º –Ω—É–∂–Ω–æ **{total_cost:.1f} ‚≠êÔ∏è** –¥–ª—è {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –£ –≤–∞—Å **{current_stars:.1f} ‚≠êÔ∏è**.",
            parse_mode="Markdown",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_id = add_user_order(user_id, channel_username, count)
    
    if order_id is None:
        await message.answer("‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    update_stars(user_id, -total_cost, reason=f"order_purchase_{order_id}")
    
    await message.answer(
        f"üéâ **–ó–ê–ö–ê–ó –°–û–ó–î–ê–ù!**\n\n"
        f"**–ö–∞–Ω–∞–ª**: {channel_username}\n"
        f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ**: {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        f"**–°–ø–∏—Å–∞–Ω–æ**: **-{total_cost:.1f} ‚≠êÔ∏è**\n"
        f"**–û—Å—Ç–∞—Ç–æ–∫**: **{(current_stars - total_cost):.1f} ‚≠êÔ∏è**",
        parse_mode="Markdown",
        reply_markup=main_menu_kb
    )
    await state.clear()

# --- –ë–õ–û–ö 2: –ü–†–û–°–ú–û–¢–† –ó–ê–ö–ê–ó–û–í (my_orders) ---

# ... (view_orders, view_order_details –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@router.callback_query(F.data == "my_orders")
async def view_orders(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    
    orders = get_user_orders(user_id)
    
    if not orders:
        text = "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="buy_subs_start")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        keyboard_buttons = []
        for order in orders:
            task_id = order['id']
            completion_progress = order.get('current_completions', 0)
            target = order.get('max_completions', 0)
            status_emoji = 'üéâ' if completion_progress >= target else '‚è≥'
            
            # –§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: [–≠–º–æ–¥–∑–∏] –ó–∞–∫–∞–∑ ‚ÑñID (–ü—Ä–æ–≥—Ä–µ—Å—Å/–¶–µ–ª—å)
            button_text = f"{status_emoji} –ó–∞–∫–∞–∑ ‚Ññ{task_id} ({completion_progress}/{target})"
            keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"show_order_{task_id}")])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_buttons.append([InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –µ—â—ë –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="buy_subs_start")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        text = (
            "üìã **–í–ê–®–ò –ó–ê–ö–ê–ó–´**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
        )

    await callback.message.edit_text(
        text, 
        parse_mode="Markdown",
        reply_markup=kb
    )

@router.callback_query(F.data.startswith("show_order_"))
async def view_order_details(callback: types.CallbackQuery):
    global USER_ORDER_COST_STARS, USER_TASK_REWARD_STARS 
    
    task_id = int(callback.data.split("_")[-1])
    await callback.answer()
    
    order = get_order_details(task_id)
    
    if not order:
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞**. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return

    completion_progress = order.get('current_completions', 0)
    target = order.get('max_completions', 0)
    total_cost_paid = target * USER_ORDER_COST_STARS
    
    status_emoji = 'üéâ' if completion_progress >= target else '‚è≥'
    status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' if completion_progress >= target else '–í —Ä–∞–±–æ—Ç–µ'

    msg = (
        f"**üìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê ‚Ññ{task_id}**\n\n"
        f"{status_emoji} **–°—Ç–∞—Ç—É—Å**: **{status}**\n"
        f"üîó **–ö–∞–Ω–∞–ª**: `{order['channel']}`\n"
        f"üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å**: **{completion_progress}** –∏–∑ **{target}** –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
        f"üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞**: **{total_cost_paid:.1f} ‚≠êÔ∏è**\n"
        f"üíé **–ù–∞–≥—Ä–∞–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é**: {USER_TASK_REWARD_STARS:.1f} ‚≠êÔ∏è/–ø–æ–¥–ø–∏—Å–∫–∞"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="my_orders")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(
        msg,
        parse_mode="Markdown",
        reply_markup=kb
    )

# --- –ë–õ–û–ö 3: –ó–ê–†–ê–ë–û–¢–û–ö (earn_task_menu) (–û–ë–ù–û–í–õ–ï–ù–û) ---

@router.callback_query(F.data == "earn_task_menu")
async def earn_stars_start(callback: types.CallbackQuery, bot: Bot):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Flyer/Subgram -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è (1 ‚≠êÔ∏è)."""
    user_id = callback.from_user.id
    user = callback.from_user
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–¥–∞—á–∏ (Flyer/Subgram) - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ Flyer, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.
    subgram_data = await flyer_check_wrapper(user=user, message=callback.message, action="subscribe")
    
    # –ï—Å–ª–∏ Flyer API –ø–æ–∫–∞–∑–∞–ª –∑–∞–¥–∞–Ω–∏–µ (skip=False), —Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è.
    if not subgram_data.get("skip"):
        await callback.answer()
        return

    await callback.answer() # –û—Ç–≤–µ—Ç –Ω–∞ callback, –µ—Å–ª–∏ Flyer –Ω–µ –¥–∞–ª –∑–∞–¥–∞–Ω–∏—è

    # 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∑–∞–¥–∞—á–∞–º, –µ—Å–ª–∏ Flyer –Ω–µ –¥–∞–ª –∑–∞–¥–∞–Ω–∏–π
    task = get_next_order_task(user_id) 
    
    if task:
        # –ù–∞–π–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞
        reward = USER_TASK_REWARD_STARS 
        channel = task['channel']
        task_id = task['id']
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∏ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel.strip('@')}")],
            [InlineKeyboardButton(text=f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ({reward:.1f} ‚≠êÔ∏è)", callback_data=f"check_user_order_{task_id}")],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å/–°–ª–µ–¥. –∑–∞–¥–∞–Ω–∏–µ", callback_data="earn_task_menu")] 
        ])
        
        await callback.message.edit_text(
            "üí∞ **–ó–ê–î–ê–ù–ò–ï: –ü–û–î–ü–ò–°–ö–ê –ù–ê –ö–ê–ù–ê–õ**\n\n"
            f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: **`{channel}`**\n"
            f"**–ù–∞–≥—Ä–∞–¥–∞**: **{reward:.1f} ‚≠êÔ∏è**",
            parse_mode="Markdown",
            reply_markup=kb
        )
        
    else:
        # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
        await callback.message.edit_text(
            "üòî **–ó–ê–î–ê–ù–ò–Ø –ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨**\n\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∏ –æ—Ç Flyer, –Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
            reply_markup=get_back_to_menu_keyboard()
        )

# --- –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –ü–†–û–í–ï–†–ö–ê –ó–ê–î–ê–ù–ò–Ø FLYER ---

@router.callback_query(F.data.startswith("check_flyer_"))
async def check_flyer_task_done(callback: types.CallbackQuery, bot: Bot):
    signature = callback.data.split("check_flyer_")[-1]
    user_id = callback.from_user.id
    logging.info(f"[Flyer] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª 'check_flyer' –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {signature}")
    
    await callback.answer("‚è≥ –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è...", show_alert=False)
    
    result = await check_flyer_task(user_id, signature)
    
    if result['success']:
        reward = FLYER_TASK_REWARD
        update_stars(user_id, reward, reason=f"flyer_task_complete_{signature}")
        logging.info(f"[Flyer] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward} ‚≠êÔ∏è –∑–∞ –∑–∞–¥–∞—á—É {signature}")
        await callback.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ù–∞—á–∏—Å–ª–µ–Ω–æ {reward:.1f} ‚≠êÔ∏è", show_alert=True)
        
    elif result.get('result') == 'wait':
        logging.info(f"[Flyer] –ó–∞–¥–∞–Ω–∏–µ {signature} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        await callback.answer("üîÑ –ó–∞–¥–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        await earn_stars_start(callback, bot)
        return
        
    elif result.get('result') in ['key_error', 'api_error']:
        logging.warning(f"[Flyer] API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è {signature} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è.", show_alert=True)
        
    else:
        logging.info(f"[Flyer] –ó–∞–¥–∞–Ω–∏–µ {signature} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ")
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫.", show_alert=True)
        
    await earn_stars_start(callback, bot)



@router.callback_query(F.data.startswith("check_user_order_"))
async def check_user_order_done(callback: types.CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–Ω–∞–ª –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã."""
    task_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    task = get_order_details(task_id)
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)
        await earn_stars_start(callback, bot) 
        return
        
    reward = USER_TASK_REWARD_STARS
    channel = task['channel']
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É. 
        member = await bot.get_chat_member(channel, user_id)
        
        if member.status in ['member', 'creator', 'administrator']:
            # –£—Å–ø–µ—Ö: –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            update_stars(user_id, reward, reason=f"user_order_complete_{task_id}")
            add_user_task_done(user_id, task_id)
            increment_order_completion(task_id) 
            
            await callback.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ù–∞—á–∏—Å–ª–µ–Ω–æ {reward:.1f} ‚≠êÔ∏è", show_alert=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ/–º–µ–Ω—é
            await earn_stars_start(callback, bot) 
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è
            task_details_after = get_order_details(task_id)
            if task_details_after and task_details_after['current_completions'] >= task_details_after['max_completions']:
                 creator_id = task_details_after.get('creator_id')
                 if creator_id:
                     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞, —á—Ç–æ –µ–≥–æ –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω
                     await bot.send_message(creator_id, f"üéâ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞–Ω–∞–ª **{channel}** ({task_details_after['max_completions']} –ø–æ–¥–ø–∏—Å–æ–∫) **–ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω!**", parse_mode="Markdown")
                             
        else:
            await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True)
            
    except Exception as e:
        logging.error(f"Error checking sub for order {task_id}: {e}")
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ.
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ö–∞–Ω–∞–ª, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ.", show_alert=True)


# -----------------------------------------------------------
# ---------------------- 4. –ó–ê–ü–£–°–ö –ë–û–¢–ê ---------------------
# -----------------------------------------------------------

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot
    bot = Bot(
        token=BOT_TOKEN, 
        default=DefaultBotProperties(parse_mode="Markdown") # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    dp = Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –ª–æ–≥–∏–∫–æ–π
    dp.include_router(router)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    get_conn() 
    
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # –ó–∞–ø—É—Å–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")